<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<HEAD>
    <title>Offline eBIRForms Package v7.4.1</title>
    <meta http-equiv="x-ua-compatible" content="ie=9">
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />

    <HTA:APPLICATION ID="BIRViewOfflineForms" APPLICATIONNAME="BIR Forms" VERSION="7.2" CAPTION="yes" SHOWINTASKBAR="yes" ICON="img/bir_icon.ico" SINGLEINSTANCE="YES" SYSMENU="NO" NAVIGABLE="YES" WINDOWSTATE="maximize" SCROLLFLAT="YES">
        <script src='jq/jquery-1.7.1.min.js'></script>
        <script src='jq/jquery-ui-1.8.18.custom.min.js'></script>
        <script src='js/environment.js'></script>
        <script src='js/string-util.js'></script>
        <script src='js/blowfish.js'></script>
        <script src='js/rijndael.js'></script>
        <script src='js/aes.js'></script>
        <link href="css/styles.css" rel="stylesheet" type="text/css" />
        <link rel="stylesheet" type="text/css" href="css/style.css" />
        <script language="VBScript" src="js/eBIRTools.vbs"></script>
        <!-- <script src='js/testScript.js'></script> -->

</HEAD>
<style>
    .Field {
        color: black;
        border: 1px solid #FFFFFF;
        background-color: #e6e6e6;
    }
    
    .Find {
        color: blue;
        font: 10px Arial;
    }
</style>
<script type="text/javascript">
    var str;
    // str = setInterval("sleeptime()", 300);

    function rdoPropertyJS(rdoCode, description) {
        this.rdoCode = rdoCode;
        this.description = description;
    }

    var rdoList = new Array();

    //topNav
    $(document).ready(function() {
        $("ul.subnav").parent().append("<span></span>"); //Only shows drop down trigger when js is enabled (Adds empty span tag after ul.subnav*)  
        $("ul.topnav li span").click(function() { //When trigger is clicked...            
            //Following events are applied to the subnav itself (moving subnav up and down)  
            $(this).parent().find("ul.subnav").slideDown('fast').show(); //Drop down the subnav on click    
            $(this).parent().hover(function() {}, function() {
                $(this).parent().find("ul.subnav").slideUp('slow'); //When the mouse hovers out of the subnav, move it back up  
            });
            //Following events are applied to the trigger (Hover events for the trigger)  
        }).hover(function() {
            $(this).addClass("subhover"); //On hover over, add class "subhover"  
        }, function() { //On Hover Out  
            $(this).removeClass("subhover"); //On hover out, remove class "subhover"  
        });
        $("ul.topnav .toplevel").click(function() { //When trigger is clicked...            
            //Following events are applied to the subnav itself (moving subnav up and down)  
            $(this).parent().find("ul.subnav").slideDown('fast').show(); //Drop down the subnav on click    
            $(this).parent().hover(function() {}, function() {
                $(this).parent().find("ul.subnav").slideUp('slow'); //When the mouse hovers out of the subnav, move it back up  
            });
            //Following events are applied to the trigger (Hover events for the trigger)  
        }).hover(function() {
            $(this).addClass("subhover"); //On hover over, add class "subhover"  
        }, function() { //On Hover Out  
            $(this).removeClass("subhover"); //On hover out, remove class "subhover"  
        });

        $("ul.asubnav").parent().append("<span style='display:none;'></span>"); //Only shows drop down trigger when js is enabled (Adds empty span tag after ul.subnav*)  
        $("ul.atopnav li span").click(function() { //When trigger is clicked...            
            //Following events are applied to the subnav itself (moving subnav up and down)  
            $(this).parent().find("ul.asubnav").slideDown('fast').show(); //Drop down the subnav on click    
            $(this).parent().hover(function() {}, function() {
                $(this).parent().find("ul.asubnav").slideUp('slow'); //When the mouse hovers out of the subnav, move it back up  
            });
            //Following events are applied to the trigger (Hover events for the trigger)  
        }).hover(function() {
            $(this).addClass("subhover"); //On hover over, add class "subhover"  
        }, function() { //On Hover Out  
            $(this).removeClass("subhover"); //On hover out, remove class "subhover"  
        });
        $("ul.atopnav .atoplevel").click(function() { //When trigger is clicked...            
            //Following events are applied to the subnav itself (moving subnav up and down)  
            $(this).parent().find("ul.asubnav").slideDown('fast').show(); //Drop down the subnav on click    
            $(this).parent().hover(function() {}, function() {
                $(this).parent().find("ul.asubnav").slideUp('slow'); //When the mouse hovers out of the subnav, move it back up  
            });
            //Following events are applied to the trigger (Hover events for the trigger)  
        }).hover(function() {
            $(this).addClass("subhover"); //On hover over, add class "subhover"  
        }, function() { //On Hover Out  
            $(this).removeClass("subhover"); //On hover out, remove class "subhover"  
        });

        $(this).bind("contextmenu", function (e) {
		    e.preventDefault();
        });
        
    });

    window.focus();
    var Fo = new ActiveXObject("Scripting.FileSystemObject"),
        FSo = '',
        t = ''; //interval creator
    var StrOut = new String();
    var FileName = new String();
    var Extention = new String();
    var d = document;

    var rdoDir = "IAF_RDO_Copy";
    var rdcDir = "IAF_RDC_Copy";
    var projDir = "IAF_Proj_Copy";

    var rdo = "RDO";
    var rdc = "RDC";
    var proj = "Proj";

    var rdoArchive = "IAF_RDO_Archive";
    var rdcArchive = "IAF_RDC_Archive";
    var projArchive = "IAF_Proj_Archive";

    var importLogFile;
    var exportLogFile;

    var returnsList = new Array();

    var alreadyRan = false;

    function runOnce() {
        if (alreadyRan) {
            return;
        }
        alreadyRan = true;

        loadXMLrdo('xml/rdo.xml');
        getRdo();

        reloadProfile();
        getDrives();
    }

    function FindFile(FOo) {
        FSo = new Enumerator(FOo.Files);
        $('#outPut').html('');
        returnsList = [];
        for (var i = 0; !FSo.atEnd(); FSo.moveNext()) {
            if (FileName == "*" || FSo.item().name.slice(0, FSo.item().name.lastIndexOf(".")).toLowerCase().indexOf(FileName) > -1)
                if (Extention == "*" || FSo.item().name.slice(FSo.item().name.lastIndexOf(".") + 1).toLowerCase().indexOf(Extention) > -1) {

                    var dMod = new Date(FSo.item().DateLastModified);
                    mm = "" + (dMod.getMonth() + 1);
                    if (mm.length == 1) {
                        mm = "0" + mm;
                    } //var mm = dMod.getMonth() + 1; 
                    dd = "" + dMod.getDate();
                    if (dd.length == 1) {
                        dd = "0" + dd;
                    } //var dd = dMod.getDate();
                    var yyyy = dMod.getFullYear();
                    var ts = getHHMMSSWithParam(FSo.item().DateLastModified);

                    if (mm.length == 1) {
                        mm = "0" + mm;
                    }
                    if (dd.length == 1) {
                        dd = "0" + dd;
                    }

                    var formName = FSo.item().name.replace(/ /g, '').substring(FSo.item().name.indexOf("-") + 1, FSo.item().name.lastIndexOf("-"));

                    var dtCreated = mm + '/' + dd + '/' + yyyy + ' ' + ts;
                    var rpYear;
                    var rpDay;
                    var rpMonth;
                    var qtr;
                    var returnPeriod;
                    var returnPeriodTS;


                    //-----Format MM/DD/YYYY : 0605, 1600WP, 2000, 2200A, 2200AN, 2200M, 2200P, 2200T, 2550M(is MM/YYYY! moved..)
                    if (formName == '0605' || formName == '1600WP' || formName == '2000' || formName == '2200A' || formName == '2200AN' || formName == '2200M' || formName == '2200P' || formName == '2200S' || formName == '2200T' || formName == '1707A') { //|| formName == '2552') {
                        
                        if (formName == '2000' || formName == '0605' || formName == '2200A' || formName == '2200AN' || formName == '2200M' || formName == '2200P' || formName == '2200S' || formName == '2200T') {
                            //|| formName == '2552') { 
                            rpYear = FSo.item().name.replace(/ /g, '').substring((FSo.item().name.lastIndexOf(".")) - 10, (FSo.item().name.lastIndexOf(".") - 6));
                            rpDay = FSo.item().name.replace(/ /g, '').substring((FSo.item().name.lastIndexOf(".")) - 12, (FSo.item().name.lastIndexOf(".")) - 10);
                            rpMonth = FSo.item().name.replace(/ /g, '').substring((FSo.item().name.lastIndexOf(".")) - 14, (FSo.item().name.lastIndexOf(".")) - 12);
                            returnPeriod = rpMonth + "/" + rpDay + "/" + rpYear;
                            var ts = FSo.item().name.replace(/ /g, '').substring((FSo.item().name.lastIndexOf(".")) - 6, (FSo.item().name.lastIndexOf(".")));
                            returnPeriodTS = ts.substring(0, 2) + ":" + ts.substring(2, 4) + ":" + ts.substring(4, 6);
                        } else {
                            if (FSo.item().name.indexOf('V') == -1) {
                                rpYear = FSo.item().name.replace(/ /g, '').substring((FSo.item().name.lastIndexOf(".")) - 4, (FSo.item().name.lastIndexOf(".")));
                                rpDay = FSo.item().name.replace(/ /g, '').substring((FSo.item().name.lastIndexOf(".")) - 6, (FSo.item().name.lastIndexOf(".")) - 4);
                                rpMonth = FSo.item().name.replace(/ /g, '').substring((FSo.item().name.lastIndexOf(".")) - 8, (FSo.item().name.lastIndexOf(".")) - 6);
                                
                            } else {
                                
                                rpYear = FSo.item().name.replace(/ /g, '').substring((FSo.item().name.lastIndexOf("V")) - 4, (FSo.item().name.lastIndexOf("V")));
                                rpDay = FSo.item().name.replace(/ /g, '').substring((FSo.item().name.lastIndexOf("V")) - 6, (FSo.item().name.lastIndexOf("V")) - 4);
                                rpMonth = FSo.item().name.replace(/ /g, '').substring((FSo.item().name.lastIndexOf("V")) - 8, (FSo.item().name.lastIndexOf("V")) - 6);
                                
                            }
                            
                            returnPeriod = rpMonth + "/" + rpDay + "/" + rpYear;
                            returnPeriodTS = "";
                        }
                    }
                    //-----Format MM/DD/YYYY

                    //-----Format MM/YYYY-[Q1-Q4] : 2550Q(from-toMM/DD/YYYY)?, 2551, 2553
                    if (formName == '2551' || formName == '2553' || formName == '2550Q' || formName == '2551Qv2018' ) {
                        if (FSo.item().name.indexOf('V') == -1) {
                            rpYear = FSo.item().name.replace(/ /g, '').substring((FSo.item().name.lastIndexOf(".")) - 6, (FSo.item().name.lastIndexOf(".") - 2));
                            rpMonth = FSo.item().name.replace(/ /g, '').substring((FSo.item().name.lastIndexOf(".")) - 8, (FSo.item().name.lastIndexOf(".")) - 6);
                            qtr = FSo.item().name.replace(/ /g, '').substring((FSo.item().name.lastIndexOf(".")) - 2, (FSo.item().name.lastIndexOf(".")));
                        } else {
                            rpYear = FSo.item().name.replace(/ /g, '').substring((FSo.item().name.lastIndexOf("V")) - 6, (FSo.item().name.lastIndexOf("V") - 2));
                            rpMonth = FSo.item().name.replace(/ /g, '').substring((FSo.item().name.lastIndexOf("V")) - 8, (FSo.item().name.lastIndexOf("V")) - 6);
                            qtr = FSo.item().name.replace(/ /g, '').substring((FSo.item().name.lastIndexOf("V")) - 2, (FSo.item().name.lastIndexOf("V")));
                        }
                        returnPeriod = rpMonth + "/" + rpYear + "-" + qtr;
                        returnPeriodTS = "";
                    }
                    //-----Format MM/YYYY-[Q1-Q4]	

                    //-----Format MM/YYYY : 1600, 1601C, 1601E, 1601F, 1602, 1704, and 2551M(For the Month?), 
                    if (formName == '0619E' || formName == '1600' || formName == '1601C' || formName == '1601Cv2018' || formName == '1601E' || formName == '1601F' || formName == '1602' || formName == '1704' || formName == '2000v2018' || formName == '2551M' || formName == '2550M' || formName == '1701' || formName == '1702EX' || formName == '1702MX' || formName == '1702RT' ) {
                        if (FSo.item().name.indexOf('V') == -1) {
                            rpYear = FSo.item().name.replace(/ /g, '').substring((FSo.item().name.lastIndexOf(".")) - 4, (FSo.item().name.lastIndexOf(".")));
                            rpMonth = FSo.item().name.replace(/ /g, '').substring((FSo.item().name.lastIndexOf(".")) - 6, (FSo.item().name.lastIndexOf(".")) - 4);
                        } else {
                            rpYear = FSo.item().name.replace(/ /g, '').substring((FSo.item().name.lastIndexOf("V")) - 4, (FSo.item().name.lastIndexOf("V")));
                            rpMonth = FSo.item().name.replace(/ /g, '').substring((FSo.item().name.lastIndexOf("V")) - 6, (FSo.item().name.lastIndexOf("V")) - 4);
                        }
                        returnPeriod = rpMonth + "/" + rpYear;
                        returnPeriodTS = "";
                    }
                    //-----Format MM/YYYY	

                    //-----Format MM/YYYY : 0619F added because of new parameter taxtypecode
                    if (formName == '0619F') {
                        if (FSo.item().name.indexOf('V') == -1) {
                            rpYear = FSo.item().name.replace(/ /g, '').substring((FSo.item().name.lastIndexOf(".")) - 6, (FSo.item().name.lastIndexOf(".")) - 2);
                            rpMonth = FSo.item().name.replace(/ /g, '').substring((FSo.item().name.lastIndexOf(".")) - 8, (FSo.item().name.lastIndexOf(".")) - 6);
                        } else {
                            rpYear = FSo.item().name.replace(/ /g, '').substring((FSo.item().name.lastIndexOf("V")) - 6, (FSo.item().name.lastIndexOf("V")) - 2);
                            rpMonth = FSo.item().name.replace(/ /g, '').substring((FSo.item().name.lastIndexOf("V")) - 8, (FSo.item().name.lastIndexOf("V")) - 6);
                        }
                        returnPeriod = rpMonth + "/" + rpYear;
                        returnPeriodTS = "";
                    }
                    //-----Format MM/YYYY	

                    //-----Format YYYY + 1-4 Qtr : 1603, 1602Qv2018, 1603Qv2018, 1601EQ, 1601FQ
                    if (formName == '1603' || formName == '1602Qv2018' || formName == '1603Qv2018' || formName == '1601EQ' || formName == '1601FQ' ) {
                        if (FSo.item().name.indexOf('V') == -1) {
                            rpYear = FSo.item().name.replace(/ /g, '').substring((FSo.item().name.lastIndexOf(".")) - 6, (FSo.item().name.lastIndexOf(".") - 2));
                            qtr = FSo.item().name.replace(/ /g, '').substring((FSo.item().name.lastIndexOf(".")) - 2, (FSo.item().name.lastIndexOf(".")));
                        } else {
                            rpYear = FSo.item().name.replace(/ /g, '').substring((FSo.item().name.lastIndexOf("V")) - 6, (FSo.item().name.lastIndexOf("V") - 2));
                            qtr = FSo.item().name.replace(/ /g, '').substring((FSo.item().name.lastIndexOf("V")) - 2, (FSo.item().name.lastIndexOf("V")));
                        }
                        returnPeriod = rpYear + "-" + qtr;
                        returnPeriodTS = "";
                    }
                    //-----Format YYYY + 1-4 Qtr	

                    //-----Format YYYY + 1-3 Qtr : 1701Q, 1701Qv2018, 1702Q
                    if (formName == '1701Q' || formName == '1701Qv2018' || formName == '1702Q') {
                        if (FSo.item().name.indexOf('V') == -1) {
                            rpYear = FSo.item().name.replace(/ /g, '').substring((FSo.item().name.lastIndexOf(".")) - 6, (FSo.item().name.lastIndexOf(".") - 2));
                            qtr = FSo.item().name.replace(/ /g, '').substring((FSo.item().name.lastIndexOf(".")) - 2, (FSo.item().name.lastIndexOf(".")));
                        } else {
                            rpYear = FSo.item().name.replace(/ /g, '').substring((FSo.item().name.lastIndexOf("V")) - 6, (FSo.item().name.lastIndexOf("V") - 2));
                            qtr = FSo.item().name.replace(/ /g, '').substring((FSo.item().name.lastIndexOf("V")) - 2, (FSo.item().name.lastIndexOf("V")));
                        }

                        returnPeriod = rpYear + "-" + qtr;
                        returnPeriodTS = "";
                    }
                    //-----Format YYYY + 1-3 Qtr 	

                    //-----Format YYYY : 1604CF, 1604E, {1700}, {1701}, {1702}, {1702EX}, {1702MX}, 1701A, 1701v2018
                    if (formName == '1604CF' || formName == '1604E' || formName == '1700' || formName == '1701' || formName == '1701A' || formName == '1702' || formName == '1702EX' || formName == '1702MX' || formName == '1702RT' || formName == '1701v2018') {
                        if (FSo.item().name.indexOf('V') == -1) {
                            rpYear = FSo.item().name.replace(/ /g, '').substring((FSo.item().name.lastIndexOf(".")) - 4, (FSo.item().name.lastIndexOf(".")));
                        } else {
                            rpYear = FSo.item().name.replace(/ /g, '').substring((FSo.item().name.lastIndexOf("V")) - 4, (FSo.item().name.lastIndexOf("V")));
                        }
                        returnPeriod = rpYear;
                        returnPeriodTS = "";
                    }
                    //-----Format YYYY	


                    //-----Format No Return Period: 6 ONETT 1606, 1707,1800, 1801, 2000-OT
                    /*if (formName == '2000OT') {
					returnPeriod = "NA";
					returnPeriodTS = "";
				}*/
                    //-----Format No Return Period	
                    //if (formName == '1707' || formName == '1800' || formName == '1801' || formName == '2000OT') {
                    if (formName == '1800' || formName == '1801' || formName == '2000OT') {
                        if (FSo.item().name.indexOf('V') == -1) {
                            rpYear = FSo.item().name.replace(/ /g, '').substring((FSo.item().name.lastIndexOf(".")) - 4, (FSo.item().name.lastIndexOf(".") - 0));
                            rpDay = FSo.item().name.replace(/ /g, '').substring((FSo.item().name.lastIndexOf(".")) - 6, (FSo.item().name.lastIndexOf(".")) - 4);
                            rpMonth = FSo.item().name.replace(/ /g, '').substring((FSo.item().name.lastIndexOf(".")) - 8, (FSo.item().name.lastIndexOf(".")) - 6);
                        } else {
                            rpYear = FSo.item().name.replace(/ /g, '').substring((FSo.item().name.lastIndexOf("V")) - 4, (FSo.item().name.lastIndexOf("V") - 0));
                            rpDay = FSo.item().name.replace(/ /g, '').substring((FSo.item().name.lastIndexOf("V")) - 6, (FSo.item().name.lastIndexOf("V")) - 4);
                            rpMonth = FSo.item().name.replace(/ /g, '').substring((FSo.item().name.lastIndexOf("V")) - 8, (FSo.item().name.lastIndexOf("V")) - 6);

                        }
                        returnPeriod = rpMonth + "/" + rpDay + "/" + rpYear;
                        returnPeriodTS = "";
                    }

                    //JTrac588: 1606 offline amended return should validate vs date of transaction, buyer TIN, TCT/OCT/CCT/
                    //JTrac673: 1706 offline amended return should validate vs date of transaction, buyer TIN, TCT/OCT/CCT/
                    //Fixed by dgarfin on 01/18/13 	
                    //JTrac859: 2552 -Offline - Online validation of Original & Amended return. Should apply validation of 'Amended' return in offline & online.
                    //Validate: 1. Date of Transaction, 2. TIN and 3. Kind of Transaction	
                    //Fixed by dgarfin on 02/08/13							
                    //if (formName == '1606' || formName == '1706' || formName == '2552') {
                    //if (formName == '1606' || formName == '1706' || formName == '1707') { //JTrac#859 on hold (2552)
                    if (formName == '1606' || formName == '1706' || formName == '1707' || formName == '2552') { //JTrac#859
                        //dgarfin: Removed if/else stmt since for these 3 forms, same handling in determining returnPeriod for amended and not amended
                        rpYear = FSo.item().name.replace(/ /g, '').substring((FSo.item().name.lastIndexOf("_")) - 4, (FSo.item().name.lastIndexOf("_") - 0));
                        rpDay = FSo.item().name.replace(/ /g, '').substring((FSo.item().name.lastIndexOf("_")) - 6, (FSo.item().name.lastIndexOf("_")) - 4);
                        rpMonth = FSo.item().name.replace(/ /g, '').substring((FSo.item().name.lastIndexOf("_")) - 8, (FSo.item().name.lastIndexOf("_")) - 6);

                        returnPeriod = rpMonth + "/" + rpDay + "/" + rpYear;
                        returnPeriodTS = "";
                    }

                    var title = "";

                    title = FSo.item().name.replace(/ /g, '').substring(0, (FSo.item().name.lastIndexOf(".")));

                    StrOut += "<tr><td width='20' class='mainContent'>" +
                        "<input id='" + FSo.item() + "' name='rdoRecord' type='radio' value=" + FSo.item().name.replace(/ /g, '') + "/>" +
                        "</td><td class='mainContent' width='250'>" + title + "</td><td width='125' class='mainContent'>" + returnPeriod + " " + returnPeriodTS + "</td><td width='125' class='mainContent'>" + dtCreated + "</td></tr>"; //Last Mod date string 							

                    //returnsList[i] = 	"<tr><td width='20' class='mainContent'>"+dtCreated+					
                    returnsList[i] = dtCreated + "<tr><td width='20' class='mainContent'>" +
                        " <input id='" + FSo.item() + "' name='rdoRecord' type='radio' value=" + FSo.item().name.replace(/ /g, '') + "/>" +
                        "</td><td class='mainContent' width='250'>" + title + "</td><td width='125' class='mainContent'>" + returnPeriod + " " + returnPeriodTS + "</td><td width='125' class='mainContent'>" + dtCreated + "</td></tr>";
                    i++;
                }
        } //for
        if (i == 0) {
            $('#outPut').html('');
            $('#outPut').append("<tr><td colspan'2' align='center'><i class='mainLabel'>&nbsp;</td></tr>"); // No Records Found
        } else if ($('#listButtonsDiv').css('display') != 'block') $('#listButtonsDiv').show('blind');
    }

    function delitem(location) {
        var y = confirm("Are you sure you want to delete this file?");
        if (y) {
            Fo.DeleteFile(location);
            Scan();
        }
    }

    function Scan() {
        //if (formType.selectedIndex != 0 && String(tin1.value).length>0 && String(tin2.value).length>0 && String(tin3.value).length>0 && String(tin4.value).length>0 && String(fn.value).length>0 ) {
        if (formType.selectedIndex != 0 && String(tin1.value).length > 2 && String(tin2.value).length > 2 && String(tin3.value).length > 2 && String(tin4.value).length > 2) {

            //if ( String( String(fn.value).replace(/ /gi,'') ).length >11 ) {
            //	var name = String( String(fn.value).replace(/ /gi,'') ).substring(0,12);
            //} else var name = String( String(fn.value).replace(/ /gi,'') );

            //search.value = formType.value+'-'+tin1.value+tin2.value+tin3.value+tin4.value+"-"+name;
            search.value = tin1.value + tin2.value + tin3.value + tin4.value + "-" + formType.value + "-";

            FileName = (search.value.lastIndexOf(".") > -1) ? search.value.slice(0, search.value.lastIndexOf(".")) : (search.value.length > 0) ? search.value.toLowerCase() : "*"; //Get Searched File Name
            Extention = (search.value.lastIndexOf(".") > -1) ? search.value.slice(search.value.lastIndexOf(".") + 1).toLowerCase() : "xml"; // Get Searched File Extention Name
			
            var tinChkCode = getTinChkCode($('#tin1').val(),$('#tin2').val(),$('#tin3').val());

            if (path.value.length > 0 && Fo.FolderExists(path.value) && tinChkCode === 0) {
                $('#outPut').html('');
                StrOutX = '';
                FindFile(Fo.GetFolder(path.value));

                returnsList.sort();
                returnsList.reverse();
                for (var i = 0; i < returnsList.length; i++) {
                    StrOutX += returnsList[i].substring(19, returnsList[i].length);
                }

                $('#outPut').append(StrOutX); //xxx
            }
        } else {

            $('#outPut').html('');
            //$('#outPut').append("<tr><td colspan'2' align='center'><i class='mainLabel'>&nbsp;</i></td></tr>");
            search.value = '';
        }
    }

    function reloadProfile() {
        var bgFileName = qs('xmlReloadProfile');
        var bgFormType = qs('formTyp');
        if (bgFileName != null && bgFileName.indexOf('.xml') > -1 && bgFormType != null) {
            reloadProfileXML(bgFileName, bgFormType);
        }
    }

    function reloadProfileXML(loadWhere, bgFormType) {
        try {
            //This will load the file with filename loadWhere if it exists
            var fsoXML = new ActiveXObject("Scripting.FileSystemObject");

            XMLProFile = fsoXML.OpenTextFile(loadWhere, 1);
            var responseProf = d.getElementById('responseProf'); //render file and write to hidden div

            if (XMLProFile.AtEndOfStream) {
                data = "";
            } else {
                responseProf.innerHTML = XMLProFile.ReadAll(); //remove XML tag			
            }
            XMLProFile.Close();
            //alert( responseProf.innerHTML ); //Debug		

            reloadProfileData(bgFormType); /*This will load data onto fields*/

            // var alreadyRanScan = false;
            // if (alreadyRanScan) {
            //	return;
            // }
            // alreadyRanScan = true;
            Scan();

        } catch (e) {
            //msg.innerHTML = "";
            alert('exception :' + e.message);
        }
    }

    function reloadProfileData(bgFormType) {
        /*This will load data onto Background Information fields*/
        var responseProf = d.getElementById("responseProf");
        //var formTypeVal = String(responseProf.innerHTML).split('formType='); //form_type
        d.getElementById('formType').value = bgFormType; //formTypeVal[1];	

        var fnVal = String(responseProf.innerHTML).split('fn=');
        d.getElementById('fn').value = unescape(fnVal[1]);

        var tin1Val = String(responseProf.innerHTML).split('tin1=');
        d.getElementById('tin1').value = tin1Val[1];

        var tin2Val = String(responseProf.innerHTML).split('tin2=');
        d.getElementById('tin2').value = tin2Val[1];

        var tin3Val = String(responseProf.innerHTML).split('tin3=');
        d.getElementById('tin3').value = tin3Val[1];

        var tin4Val = String(responseProf.innerHTML).split('tin4=');
        d.getElementById('tin4').value = tin4Val[1];

        var rdoVal = String(responseProf.innerHTML).split('rdo=');
        d.getElementById('rdo').value = rdoVal[1];

        var lobVal = String(responseProf.innerHTML).split('lob=');
        d.getElementById('lob').value = unescape(lobVal[1]);

        var regAddrVal = String(responseProf.innerHTML).split('regAddr=');
        d.getElementById('regAddr').value = unescape(regAddrVal[1]);

        var zipVal = String(responseProf.innerHTML).split('zip=');
        d.getElementById('zip').value = zipVal[1];

        var telNoVal = String(responseProf.innerHTML).split('telNo=');
        d.getElementById('telNo').value = telNoVal[1];

        var emailVal = String(responseProf.innerHTML).split('email=');

        if (emailVal[1] === undefined) {
            d.getElementById('txtEmail').value = "";
        } else {
            d.getElementById('txtEmail').value = emailVal[1];
        }
        var confirmemailVal = String(responseProf.innerHTML).split('confirmemail=');
        if (confirmemailVal[1] === undefined) {
            d.getElementById('txtConfirmEmail').value = "";
        } else {
            d.getElementById('txtConfirmEmail').value = confirmemailVal[1];
        }

        var confirmtin1Val = String(responseProf.innerHTML).split('confirmtin1=');
        if (confirmtin1Val[1] === undefined) {
            d.getElementById('Confirmtin1').value = "";
        } else {
            d.getElementById('Confirmtin1').value = confirmtin1Val[1];
        }

        var confirmtin2Val = String(responseProf.innerHTML).split('confirmtin2=');

        if (confirmtin2Val[1] === undefined) {
            d.getElementById('Confirmtin2').value = "";
        } else {
            d.getElementById('Confirmtin2').value = confirmtin2Val[1];
        }

        var confirmtin3Val = String(responseProf.innerHTML).split('confirmtin3=');
        if (confirmtin3Val[1] === undefined) {
            d.getElementById('Confirmtin3').value = "";
        } else {
            d.getElementById('Confirmtin3').value = confirmtin3Val[1];
        }
        var confirmtin4Val = String(responseProf.innerHTML).split('confirmtin4=');
        if (confirmtin4Val[1] === undefined) {
            d.getElementById('Confirmtin4').value = "";
        } else {
            d.getElementById('Confirmtin4').value = confirmtin4Val[1];
        }


    }

    function newForm() {open
        if (document.getElementById('tin1').value == "" || document.getElementById('tin2').value == "" || document.getElementById('tin3').value == "" || document.getElementById('tin4').value == "") {
            alert("Please enter valid TIN");
            return;
        }
        var tinChkCode = getTinChkCode($('#tin1').val(),$('#tin2').val(),$('#tin3').val());
        if (tinChkCode !== 0) {
        	alert(getChkTinErrDesc(tinChkCode));
        	return;
        }
        if (document.getElementById('rdo').value == '000') {
            alert('Please enter a valid RDO Code');
            return;
        }
        if (document.getElementById('txtEmail').value == '') {
            alert('Please enter valid Email Address');
            return;
        }
       
        if (document.getElementById('Confirmtin1').value != document.getElementById('tin1').value ||
           document.getElementById('Confirmtin2').value != document.getElementById('tin2').value ||
           document.getElementById('Confirmtin3').value != document.getElementById('tin3').value ||
           document.getElementById('Confirmtin4').value != document.getElementById('tin4').value ||
           document.getElementById('txtConfirmEmail').value != document.getElementById('txtEmail').value) {
            ShowContainer('ebirConfirm');
            HideContainer('sub_content');
            return;
        }
        


        var xmlFileName = createXMLFileName();
        xmlFileNameN = xmlFileName;
        if (xmlFileName != null) {
            if (d.getElementById('formType').selectedIndex != 0) {
                var fn = d.getElementById('fn');
                var tin1 = d.getElementById('tin1');
                var tin2 = d.getElementById('tin2');
                var tin3 = d.getElementById('tin3');
                var tin4 = d.getElementById('tin4');
                var rdo = d.getElementById('rdo');
                var lob = d.getElementById('lob');
                var regAddr = d.getElementById('regAddr');
                var zip = d.getElementById('zip');
                var telNo = d.getElementById('telNo');

                //if (fn != null && fn.value > 1 && tin1 != null && tin1.value > 1 && tin2 != null && tin2.value > 1 && tin3 != null && tin3.value > 1 && 
                //tin4 != null && tin4.value > 1 && fn != null && fn.value > 1 && rdo != null && rdo.value > 1 && lob != null && lob.value > 1 && 
                //regAddr != null && regAddr.value > 1 && zip != null && zip.value > 1 && telNo != null && telNo.value > 1) {

                saveXML(xmlFileName);
                //}

                window.location = "forms/BIR-Form" + d.getElementById('formType').value + ".hta?xmlBGInfoFileName=" + xmlFileName;
            } else {
                alert('Cannot save profile.  Please select form type.');
                return;
            }
        }
    }

    function validateXMLFileName() {
        try {
            var xmlFileName = "";
            var titleTin1 = d.getElementById('tin1');
            var titleTin2 = d.getElementById('tin2');
            var titleTin3 = d.getElementById('tin3');
            var titleBranchCode = d.getElementById('tin4');

            if (titleTin1 != null && titleTin1.value.length == 3 && titleTin2 != null && titleTin2.value.length == 3 &&
                titleTin3 != null && titleTin3.value.length == 3 && titleBranchCode != null &&
                (titleBranchCode.value.length == 3 || titleBranchCode.value.length == 4)) {
                xmlFileName = "profile/" + titleTin1.value + titleTin2.value + titleTin3.value + titleBranchCode.value + ".xml";
                return xmlFileName;
            } else {
                return null;
            }

        } catch (e) {
            alert('Exception Thrown: ' + e.description);
        }
    }

    function createXMLFileName() {
        try {
            var xmlFileName = "";
            var titleTin1 = d.getElementById('tin1');
            var titleTin2 = d.getElementById('tin2');
            var titleTin3 = d.getElementById('tin3');
            var titleBranchCode = d.getElementById('tin4');

            if (titleTin1 != null && titleTin1.value.length == 3 && titleTin2 != null && titleTin2.value.length == 3 &&
                titleTin3 != null && titleTin3.value.length == 3 && titleBranchCode != null &&
                (titleBranchCode.value.length == 3 || titleBranchCode.value.length == 4)) {
            	var tinChkCode = getTinChkCode(titleTin1.value,titleTin2.value,titleTin3.value);
                if (tinChkCode === 0) {
                xmlFileName = "profile/" + titleTin1.value + titleTin2.value + titleTin3.value + titleBranchCode.value + ".xml";
                return xmlFileName;
            } else {
                	alert(getChkTinErrDesc(tinChkCode));
                	return null;
                }                	
            } else {
                alert('Cannot save profile.  Please provide a valid TIN.');
                return null;
            }

        } catch (e) {
            alert('Exception Thrown: ' + e.description);
        }
    }


    function saveXML(fileName) {
        var xmlFileName = fileName;
        if (xmlFileName != null && xmlFileName.indexOf(".xml") >= 0) {
            msg.innerHTML = 'Generating File...';
            var fileSys = new ActiveXObject("Scripting.FileSystemObject");

            var xmlFile = fileSys.CreateTextFile(xmlFileName); //(saveWhere);

            var fn = d.getElementById('fn');
            var tin1 = d.getElementById('tin1');
            var tin2 = d.getElementById('tin2');
            var tin3 = d.getElementById('tin3');
            var tin4 = d.getElementById('tin4');
            var rdo = d.getElementById('rdo');
            var lob = d.getElementById('lob');
            var regAddr = d.getElementById('regAddr');
            var zip = d.getElementById('zip');
            var telNo = d.getElementById('telNo');
            var formType = d.getElementById('formType');
            var email = d.getElementById('txtEmail')

            var Confirmtin1 = d.getElementById('Confirmtin1');
            var Confirmtin2 = d.getElementById('Confirmtin2');
            var Confirmtin3 = d.getElementById('Confirmtin3');
            var Confirmtin4 = d.getElementById('Confirmtin4');
            var ConfirmEmail = d.getElementById('txtConfirmEmail')

            var allXML = "<?xml version='1.0'?>",
                tab = d.getElementById('xmlFormat').innerHTML;
            allXML += tab; //adds line break			

            allXML += "<div>fn=" + escape(fn.value) + "fn=</div>" + tab;
            allXML += "<div>tin1=" + tin1.value + "tin1=</div>" + tab;
            allXML += "<div>tin2=" + tin2.value + "tin2=</div>" + tab;
            allXML += "<div>tin3=" + tin3.value + "tin3=</div>" + tab;
            allXML += "<div>tin4=" + tin4.value + "tin4=</div>" + tab;
            allXML += "<div>rdo=" + rdo.value + "rdo=</div>" + tab;
            allXML += "<div>lob=" + escape(lob.value) + "lob=</div>" + tab;
            allXML += "<div>regAddr=" + escape(regAddr.value) + "regAddr=</div>" + tab;
            allXML += "<div>zip=" + zip.value + "zip=</div>" + tab;
            allXML += "<div>telNo=" + telNo.value + "telNo=</div>" + tab;
            allXML += "<div>email=" + email.value + "email=</div>" + tab;
            allXML += "<div>confirmtin1=" + Confirmtin1.value + "confirmtin1=</div>" + tab;
            allXML += "<div>confirmtin2=" + Confirmtin2.value + "confirmtin2=</div>" + tab;
            allXML += "<div>confirmtin3=" + Confirmtin3.value + "confirmtin3=</div>" + tab;
            allXML += "<div>confirmtin4=" + Confirmtin4.value + "confirmtin4=</div>" + tab;
            allXML += "<div>confirmemail=" + ConfirmEmail.value + "confirmemail=</div>" + tab;
            allXML += "<div>formType=" + formType.value + "formType=</div>" + tab;

            allXML += tab + d.getElementById('xmlClose').innerHTML;

            xmlFile.write(allXML);
            xmlFile.close();
            msg.innerHTML = '';

            //if (fn != null && fn.value > 1 && tin1 != null && tin1.value > 1 && tin2 != null && tin2.value > 1 && tin3 != null && tin3.value > 1 && 
            //  tin4 != null && tin4.value > 1 && fn != null && fn.value > 1 && rdo != null && rdo.value > 1 && lob != null && lob.value > 1 && 
            //  regAddr != null && regAddr.value > 1 && zip != null && zip.value > 1 && telNo != null && telNo.value > 1 && formType != null && formType.value > 1) {
            alert('Background information saved/updated successfully as : ' + xmlFileName);
            //}	
        }
    }

    function saveXMLEmail() {
        var xmlFileName = createXMLFileName();
        if (xmlFileName != null && xmlFileName.indexOf(".xml") >= 0) {

            var fileSys = new ActiveXObject("Scripting.FileSystemObject");
            var isFileExist = fileSys.FileExists(xmlFileName);

            if (isFileExist == true) {
                var fileLoop;
                var responseProf = "";
                FoLoop = new ActiveXObject("Scripting.FileSystemObject");
                // fileLoop = FoLoop.OpenTextFile("C:\\BIRForms\\Forms-branch-6\\profile\\999999999999.xml", 1);
                fileLoop = FoLoop.OpenTextFile(xmlFileName, 1);
                responseProf = fileLoop.ReadAll();
                fileLoop.Close();
                var fnVal = String(responseProf).split('fn=');
                var fn = unescape(fnVal[1]);

                var tin1Val = String(responseProf).split('tin1=');
                var tin1 = tin1Val[1];

                var tin2Val = String(responseProf).split('tin2=');
                var tin2 = tin2Val[1];

                var tin3Val = String(responseProf).split('tin3=');
                var tin3 = tin3Val[1];

                var tin4Val = String(responseProf).split('tin4=');
                var tin4 = tin4Val[1];

                var rdoVal = String(responseProf).split('rdo=');
                var rdo = rdoVal[1];

                var lobVal = String(responseProf).split('lob=');
                var lob = unescape(lobVal[1]);

                var regAddrVal = String(responseProf).split('regAddr=');
                var regAddr = unescape(regAddrVal[1]);

                var zipVal = String(responseProf).split('zip=');
                var zip = zipVal[1];

                var telNoVal = String(responseProf).split('telNo=');
                var telNo = telNoVal[1];

                var ftVal = String(responseProf).split('formType=');
                var ft = ftVal[1];
                var email = d.getElementById('txtEmail');
                var confirmemail = d.getElementById('txtConfirmEmail');
                var confirmtin1 = d.getElementById('Confirmtin1');
                var confirmtin2 = d.getElementById('Confirmtin2');
                var confirmtin3 = d.getElementById('Confirmtin3');
                var confirmtin4 = d.getElementById('Confirmtin4');


                var fc = new ActiveXObject("Scripting.FileSystemObject");

                var xmlFile = fc.CreateTextFile(xmlFileName);

                var allXML = "<?xml version='1.0'?>",
                    tab = d.getElementById('xmlFormat').innerHTML;
                allXML += tab; //adds line break			

                allXML += "<div>fn=" + escape(fn) + "fn=</div>" + tab;
                allXML += "<div>tin1=" + tin1 + "tin1=</div>" + tab;
                allXML += "<div>tin2=" + tin2 + "tin2=</div>" + tab;
                allXML += "<div>tin3=" + tin3 + "tin3=</div>" + tab;
                allXML += "<div>tin4=" + tin4 + "tin4=</div>" + tab;
                allXML += "<div>rdo=" + rdo + "rdo=</div>" + tab;
                allXML += "<div>lob=" + escape(lob) + "lob=</div>" + tab;
                allXML += "<div>regAddr=" + escape(regAddr) + "regAddr=</div>" + tab;
                allXML += "<div>zip=" + zip + "zip=</div>" + tab;
                allXML += "<div>telNo=" + telNo + "telNo=</div>" + tab;
                allXML += "<div>email=" + email.value + "email=</div>" + tab;
                allXML += "<div>confirmtin1=" + confirmtin1.value + "confirmtin1=</div>" + tab;
                allXML += "<div>confirmtin2=" + confirmtin2.value + "confirmtin2=</div>" + tab;
                allXML += "<div>confirmtin3=" + confirmtin3.value + "confirmtin3=</div>" + tab;
                allXML += "<div>confirmtin4=" + confirmtin4.value + "confirmtin4=</div>" + tab;
                allXML += "<div>confirmemail=" + confirmemail.value + "confirmemail=</div>" + tab;
                allXML += "<div>formType=" + ft + "formType=</div>" + tab;
                allXML += tab + d.getElementById('xmlClose').innerHTML;

                xmlFile.write(allXML);
                xmlFile.close();

            }
        }
    }

    function loadXMLrdo(fileLocation) {
        try {
            //This will load the Region file with filename 'fileLocation' if it exists
            var fsoXML = new ActiveXObject("Scripting.FileSystemObject");
            XMLrdoFile = fsoXML.OpenTextFile(fileLocation, 1);

            if (XMLrdoFile.AtEndOfStream)
                data = "";
            else {
                var responseRdo = d.getElementById('responseRdo'); //render file and write to hidden div
                responseRdo.innerHTML = XMLrdoFile.ReadAll(); //remove XML tag
                //responseRdo = replaceHtml(responseRdo, XMLrdoFile.ReadAll()); //Pattern:  el = replaceHtml(el, newHtml)
            }
            XMLrdoFile.Close(); //alert( responseRdo.innerHTML ); //Debug			
            loadRdo(); /*This will load ATC onto an array*/
        } catch (e) {
            msg.innerHTML = ""; //"Region File not Found.";
        } //this will Alert File not Found if it doesn't exist
    }

    var rdoCount = 0;

    function loadRdo() {
        /*This will load data onto an array*/
        var response = d.getElementById("responseRdo");

        var rdoCnt = String(response.innerHTML).split('rdoCount=');
        rdoCount = rdoCnt[1];

        var k = 0;
        //loads rdoList from xml
        for (var i = 1; i <= rdoCount; i++) {

            var rdo = String(response.innerHTML).split('rdo' + i + ':');
            var rdoStr = rdo[1];

            //Ensure that before writing to rdoPropertyJS the formType 2200A is traceable in rdoStr
            if (rdoStr.indexOf('Main') >= 0) {
                var rdoValues = rdoStr.split('~');
                var rdoCode = rdoValues[0];
                var description = rdoValues[1];

                var objRdo = new rdoPropertyJS(rdoCode, description);
                rdoList[k] = objRdo;
                k++;
                //alert('BIR main form successfully created array #'+i);

            } else {
                //alert('2200A not found in array #'+i);
                continue;
            }
        }
    }

    function getRdo() {
        var data = "<option value='000'>(Select RDO)</option>";

        for (var i = 0; i < rdoList.length; i++) {
            var rdo = rdoList[i];
            data = data + "<option value='" + rdo.rdoCode + "'>" + rdo.description + "</option>";

        }

        //selectRegion11.innerHTML = data;
        //selectRegion12.innerHTML = data;

        $('#rdo').html(data);

    }

    function viewRecord() {

        if (document.getElementById('txtEmail').value == '') {
            alert('Please enter  valid Email Address');
            return;
        }
        
        if (document.getElementById('Confirmtin1').value != document.getElementById('tin1').value ||
            document.getElementById('Confirmtin2').value != document.getElementById('tin2').value ||
            document.getElementById('Confirmtin3').value != document.getElementById('tin3').value ||
            document.getElementById('Confirmtin4').value != document.getElementById('tin4').value ||
            document.getElementById('txtConfirmEmail').value != document.getElementById('txtEmail').value) {
            ShowContainer('ebirConfirm');
            HideContainer('sub_content');
            return;
        }

        saveXMLEmail();
        $('input:radio:checked').each(function() {
            var fileName = $(this).val().replace(/\//g, '');
            var url = "forms/BIR-Form" + fileName.replace(/ /g, '').substring((fileName.replace(/ /g, '').indexOf('-')) + 1, (fileName.replace(/ /g, '').lastIndexOf('-'))) + ".hta?xmlFileName=savefile/" + fileName.replace(/ /g, '');
            window.location = url; //"forms/BIR-Form" + fileName.replace(/ /g, '').substring((fileName.replace(/ /g, '').indexOf('-'))+1, (fileName.replace(/ /g, '').lastIndexOf('-')) ) + ".hta?xmlFileName=savefile/" + fileName.replace(/ /g, '');
        });

    }

    function deleteRecord() {

        $('input:radio:checked').each(function() {
            var id = $(this).attr('id');
            delitem(id);
        });
        // d.location.reload(true);
    }

    function clearMainForm() {
        d.getElementById('fn').value = "";
        d.getElementById('tin1').value = "";
        d.getElementById('tin2').value = "";
        d.getElementById('tin3').value = "";
        d.getElementById('tin4').value = "";
        d.getElementById('rdo').value = "";
        d.getElementById('lob').value = "";
        d.getElementById('regAddr').value = "";
        d.getElementById('zip').value = "";
        d.getElementById('telNo').value = "";
    }

    function validateTINInput(param) {

        var tin1 = d.getElementById('tin1');
        var tin2 = d.getElementById('tin2');
        var tin3 = d.getElementById('tin3');
        var tin4 = d.getElementById('tin4');

        if (tin1 != null && tin1.value.length == 3 && tin2 != null && tin2.value.length == 3 && tin3 != null && tin3.value.length == 3 && tin4 != null && (tin4.value.length == 3 || tin4.value.length == 4 || tin4.value.length == 5)) {
            return true;
        } else {
            if (param == tin4) {
                alert("Please provide a valid TIN.");
                return false;
            }
        }
    }

    function loadBGXML(param) {
        var tinNum = param;
        try {
            var tin1 = d.getElementById('tin1');
            var tin2 = d.getElementById('tin2');
            var tin3 = d.getElementById('tin3');
            var tin4 = d.getElementById('tin4');
            xmlProfileName = "profile/" + tin1.value + tin2.value + tin3.value + tin4.value + ".xml";

            var fileSys = new ActiveXObject("Scripting.FileSystemObject");
            var isFileExist = fileSys.FileExists(xmlProfileName);

            if (isFileExist == false) {
                d.getElementById('Confirmtin1').value = "";
                d.getElementById('Confirmtin2').value = "";
                d.getElementById('Confirmtin3').value = "";
                d.getElementById('Confirmtin4').value = "";
                d.getElementById('txtConfirmEmail').value = "";
            }

            var isTINValid = validateTINInput(tinNum);
            if (isTINValid === true) {
            	var isOnBlur = true;
                var tinNumber = '';
                $(".chkTin input").each(function () {
                    if (this == document.activeElement) isOnBlur = false;
                });
               	var tinChkCode = getTinChkCode($('#tin1').val(),$('#tin2').val(),$('#tin3').val());
                if (tinChkCode !== 0) {
                	isTINValid = false;
                }
                if (isOnBlur) {
                    if (tinChkCode !== 0) {
                    	alert(getChkTinErrDesc(tinChkCode));
                    }
                }
            }
            if (isTINValid == true) {
                var tin1 = d.getElementById('tin1');
                var tin2 = d.getElementById('tin2');
                var tin3 = d.getElementById('tin3');
                var tin4 = d.getElementById('tin4');
                var loadWhere = "profile/" + tin1.value + tin2.value + tin3.value + tin4.value + ".xml"

                //This will load the file with filename loadWhere if it exists
                var fsoXML = new ActiveXObject("Scripting.FileSystemObject");
                XMLBGFile = fsoXML.OpenTextFile(loadWhere, 1);
                var responseBG = d.getElementById('responseBG'); //render file and write to hidden div

                if (XMLBGFile.AtEndOfStream) {
                    data = "";
                } else {
                    responseBG.innerHTML = XMLBGFile.ReadAll(); //remove XML tag			
                }
                XMLBGFile.Close();
                //alert( responseBG.innerHTML ); //Debug		

                loadBGData(); /*This will load data onto fields*/
            }

        } catch (e) {
            msg.innerHTML = "";
        }
    }

    function loadBGData() {
        /*This will load data onto Background Information fields*/
        var responseBG = d.getElementById("responseBG");

        var formTypeVal = String(responseBG.innerHTML).split('formType=');

        var fnVal = String(responseBG.innerHTML).split('fn=');
        d.getElementById('fn').value = unescape(fnVal[1]);

        var tin1Val = String(responseBG.innerHTML).split('tin1=');
        d.getElementById('tin1').value = tin1Val[1];

        var tin2Val = String(responseBG.innerHTML).split('tin2=');
        d.getElementById('tin2').value = tin2Val[1];

        var tin3Val = String(responseBG.innerHTML).split('tin3=');
        d.getElementById('tin3').value = tin3Val[1];

        var tin4Val = String(responseBG.innerHTML).split('tin4=');
        d.getElementById('tin4').value = tin4Val[1];

        var rdoVal = String(responseBG.innerHTML).split('rdo=');
        d.getElementById('rdo').value = rdoVal[1];

        var lobVal = String(responseBG.innerHTML).split('lob=');
        d.getElementById('lob').value = unescape(lobVal[1]);

        var regAddrVal = String(responseBG.innerHTML).split('regAddr=');
        d.getElementById('regAddr').value = unescape(regAddrVal[1]);

        var zipVal = String(responseBG.innerHTML).split('zip=');
        d.getElementById('zip').value = zipVal[1];

        var telNoVal = String(responseBG.innerHTML).split('telNo=');
        d.getElementById('telNo').value = telNoVal[1];

        var emailVal = String(responseBG.innerHTML).split('email=');

        if (emailVal[1] === undefined) {
            d.getElementById('txtEmail').value = "";
        } else {
            d.getElementById('txtEmail').value = emailVal[1];
        }

        var confirmemailVal = String(responseBG.innerHTML).split('confirmemail=');
        if (confirmemailVal[1] === undefined) {
            d.getElementById('txtConfirmEmail').value = "";
        } else {
            d.getElementById('txtConfirmEmail').value = confirmemailVal[1];
        }

        var confirmtin1Val = String(responseBG.innerHTML).split('confirmtin1=');
        if (confirmtin1Val[1] === undefined) {
            d.getElementById('Confirmtin1').value = "";
        } else {
            d.getElementById('Confirmtin1').value = confirmtin1Val[1];
        }

        var confirmtin2Val = String(responseBG.innerHTML).split('confirmtin2=');

        if (confirmtin2Val[1] === undefined) {
            d.getElementById('Confirmtin2').value = "";
        } else {
            d.getElementById('Confirmtin2').value = confirmtin2Val[1];
        }

        var confirmtin3Val = String(responseBG.innerHTML).split('confirmtin3=');
        if (confirmtin3Val[1] === undefined) {
            d.getElementById('Confirmtin3').value = "";
        } else {
            d.getElementById('Confirmtin3').value = confirmtin3Val[1];
        }
        var confirmtin4Val = String(responseBG.innerHTML).split('confirmtin4=');
        if (confirmtin4Val[1] === undefined) {
            d.getElementById('Confirmtin4').value = "";
        } else {
            d.getElementById('Confirmtin4').value = confirmtin4Val[1];
        }

    }

    function getInternetExplorerVersion()
        // Returns the version of Windows Internet Explorer or a -1
        // (indicating the use of another browser).
    {

        var rv = -1; // Return value assumes failure.
        if (navigator.appName == 'Microsoft Internet Explorer') {
            var ua = navigator.userAgent;
            var re = new RegExp("MSIE ([0-9]{1,}[\.0-9]{0,})");
            if (re.exec(ua) != null) {
                rv = parseFloat(RegExp.$1);
                if (rv == 7 && ua.indexOf('Trident/4.0') >= 0) {
                    rv = 8;
                }
            }

        }
        return rv;
    }

    function checkIEVersion() {
        var msg = "";
        var ver = getInternetExplorerVersion();
        if (ver > -1) {
            if (ver < 8.0) {
                //msg = "You are using an older version of ActiveX components!\n\nYou may want to upgrade your copy of Internet Explorer \n to ver. 8 at the minimum to fully utilize this software.\n\nClick 'OK' to go directly to the download site.\n\nClick 'Cancel' should you want to download later.";
                msg = "You are using an older version of ActiveX components!\n\nTo fully utilize this software, please install ActiveX components.\n\nClick 'OK' to go directly to the download site.\n\nClick 'Cancel' should you want to download later.";
                if (confirm(msg)) {

                    window.open("http://windows.microsoft.com/en-US/internet-explorer/downloads/ie/");
                    window.close();
                    self.close();
                } else {
                    alert("eBIRForms software will now terminate.");
                    window.close();
                    self.close();
                }
            }

        }
    }
    ////////////////////////////  For 'Import All' Testing
    function fileTransfer(mode) { //I or E

        try {
            importLogFile = Fo.CreateTextFile("logfile/import-" + getMMDDYYYYHHmmSS() + ".log");
            importLogFile.writeLine("------------------------------------------------------------");
            importLogFile.writeLine(getMMDDYYYYHHmmSSsss() + "      Import job started...");

            var drive = d.getElementById('driveSelect').value;
            if (drive == '0') {
                importLogFile.writeLine(getMMDDYYYYHHmmSSsss() + "      Please select the drive name of your USB flash drive or CD-RW.");
                alert("Please select the drive name of your USB flash drive or CD-RW.");
                cancelHaveDiskModal();
            }

            var fso = new ActiveXObject("Scripting.FileSystemObject");

            //Import Process
            if (mode == 'I') {
                var rdoFolderExists = fso.FolderExists(drive + rdoDir);
                var rdcFolderExists = fso.FolderExists(drive + rdcDir);

                //For RDO Import
                if (rdoFolderExists == true && rdcFolderExists == false) {

                    importProcess(rdoDir, rdo, drive, rdcDir);

                }
                    //For RDC Import
                else if (rdoFolderExists == false && rdcFolderExists == true) {

                    importProcess(rdcDir, rdc, drive, projDir);

                } else if (rdoFolderExists == true && rdcFolderExists == true) {
                    //Unlikely to happen since folderName creation are specific for TP, RDO and RDC.
                    //However, test both folders which has files

                    if (Fo.GetFolder(drive + rdoDir).Files.Count > 0 && Fo.GetFolder(drive + rdcDir).Files.Count <= 0) {

                        importProcess(rdoDir, rdo, drive, rdcDir);

                    } else if (Fo.GetFolder(drive + rdcDir).Files.Count > 0 && Fo.GetFolder(drive + rdoDir).Files.Count <= 0) {

                        importProcess(rdcDir, rdc, drive, projDir);

                    } else if (Fo.GetFolder(drive + rdcDir).Files.Count <= 0 && Fo.GetFolder(drive + rdoDir).Files.Count <= 0) {
                        importLogFile.writeLine(getMMDDYYYYHHmmSSsss() + "      Error Code 'ND' : No such directory found in USB flash drive or CD-RW!");
                        alert("Error Code:  ND \n\nNo such directory found in USB flash drive or CD-RW!");
                        cancelHaveDiskModal();

                    } else if (Fo.GetFolder(drive + rdcDir).Files.Count > 0 && Fo.GetFolder(drive + rdoDir).Files.Count > 0) {
                        //Unlikely error that user got both subfolders: 'IAF_RDO_Copy' and 'IAF_RDC_Copy'
                        importLogFile.writeLine(getMMDDYYYYHHmmSSsss() + "      Could not proceed importing files.  USB flash drive or CD-RW should only have either \n'IAF_RDO_Copy' or 'IAF_RDC_Copy'.");
                        alert("Could not proceed importing files.\n\nUSB flash drive or CD-RW should only have either \n'IAF_RDO_Copy' or 'IAF_RDC_Copy'.");
                        cancelHaveDiskModal();

                    }

                } else if (rdoFolderExists == false && rdcFolderExists == false) {
                    importLogFile.writeLine(getMMDDYYYYHHmmSSsss() + "      Error Code 'ND' : No such directory found in USB flash drive or CD-RW!");
                    alert("Error Code:  ND \n\nNo such directory found in USB flash drive or CD-RW!");
                    cancelHaveDiskModal();
                }

            }
            importLogFile.writeLine(getMMDDYYYYHHmmSSsss() + "      Import job terminated");
            importLogFile.writeLine("------------------------------------------------------------");
            importLogFile.close();

        } catch (e) {
            alert("Exception Thrown: " + e.message + "\n\nPlease contact your IAF System Administrator!");
            return;
            cancelHaveDiskModal();
        }



    }

    function importProcess(dir, name, drive, dirTarget) {

        var fileLoop;
        Fo = new ActiveXObject("Scripting.FileSystemObject");
        FoLoop = new ActiveXObject("Scripting.FileSystemObject");
        FoSuccess = new ActiveXObject("Scripting.FileSystemObject");

        if (Fo.GetFolder(drive + dir).Files.Count == 0) {
            importLogFile.writeLine(getMMDDYYYYHHmmSSsss() + "      Error: File not found in 'IAF_" + name + "_Copy' directory!");
            alert("Error: File not found in 'IAF_" + name + "_Copy' directory!");
            return;
        } else {
            //Copy files from USB to 'temp'
            Fo.CopyFile(drive + dir + "/*", "temp/");

            var fsObj = new Enumerator(Fo.GetFolder('temp/').Files);
            var fileContent = "";
            var decryptedFileContent = "";
            var fileName = "";
            var formName = "";
            var fileCtr = 0;
            var fileSuccCtr = 0;

            for (i = 0; !fsObj.atEnd(); fsObj.moveNext()) {

                if (fsObj.item().Size > 0) {
                    //Read File and check if Non-Compliant
                    fileName = fsObj.item().Name;
                    formName = fileName.substring(fileName.indexOf("-") + 1, fileName.lastIndexOf("-"));

                    fileLoop = FoLoop.OpenTextFile("temp/" + fileName, 1);
                    fileContent = fileLoop.ReadAll();
                    fileLoop.Close();

                    if (fileContent.indexOf("</div>") >= 0) { //Assume unencrypted file was submitted
                        //Move file from 'temp' to 'failed'
                        Fo.MoveFile("temp/" + fileName, "failed/" + fileName.substring(0, fileName.indexOf(".")) + "-" + getMMDDYYYYHHmmSS() + "NC.xml");
                        importLogFile.writeLine(getMMDDYYYYHHmmSSsss() + "      Error Code NC:  The file format submitted is non-compliant! Please ensure that the filename '" + fileName + "' is encrypted.");
                        alert("Error Code:  NC \n\nThe file format submitted is non-compliant!\n\nPlease ensure that the filename '" + fileName + "' is encrypted.");
                        //cancelHaveDiskModal();
                    } else {
                        try {
                            //Decryption of data content 'fileContent' 
                            decryptedFileContent = decrypt(fileContent);
                        } catch (e) {
                            //alert('Exception Thrown: '+e.description);
                            Fo.MoveFile("temp/" + fileName, "failed/" + fileName.substring(0, fileName.indexOf(".")) + "-" + getMMDDYYYYHHmmSS() + "DP.xml");
                            importLogFile.writeLine(getMMDDYYYYHHmmSSsss() + "      Error Code DP1:  Decryption problem encountered for filename '" + fileName + "' !");
                            alert("Error Code:  DP \n\nDecryption problem encountered for filename '" + fileName + "' !");
                            //cancelHaveDiskModal();										
                        }

                        if (decryptedFileContent.indexOf("All Rights Reserved BIR 2014.0") >= 0 || decryptedFileContent.indexOf("All Rights Reserved BIR 2012.0") >= 0) {

                            //Read decryptedFile and build file for 'profile'
                            //Test if filename exists in 'profile', if so then overwrite it with the newly created profile out of 'decryptedFileContent'		
                            var decryptedProfileContent = createProfileXML(decryptedFileContent, formName);

                            if (Fo.FileExists("profile/" + fileName.substring(0, fileName.indexOf("-")) + ".xml")) {
                                //Remove existing profile file first, since there is no 'overwrite' feature in FileSystemObject
                                Fo.DeleteFile("profile/" + fileName.substring(0, fileName.indexOf("-")) + ".xml");
                            }

                            var proFile = Fo.CreateTextFile("profile/" + fileName.substring(0, fileName.indexOf("-")) + ".xml");
                            proFile.write(decryptedProfileContent);
                            proFile.close();

                            //Read decryptedFile and createTextFile from that exact decryptedFile going to 'savefile' 
                            //Test if filename exists in 'savefile', if so then overwrite it with the newly created savefile out of 'decryptedFileContent'
                            if (Fo.FileExists("savefile/" + fileName.substring(0, fileName.indexOf("-")) + ".xml")) {
                                //Remove existing savefile file first, since there is no 'overwrite' feature in FileSystemObject
                                Fo.DeleteFile("savefile/" + fileName);
                            }

                            var saveFile = Fo.CreateTextFile("savefile/" + fileName);
                            saveFile.write(decryptedFileContent);
                            saveFile.close();

                            //Successful decryption and data import, move encrypted file from 'temp' to 'success' //error
                            //Dev Note: To avoid 'unknown exception', 'success' shouldn't have a duplicate of record from 'temp'
                            //          or just test if success got that duplicate name, if so then delete it first before moving
                            if (Fo.FileExists("success/" + fileName)) {
                                //Remove existing success file first, since there is no 'overwrite' feature in FileSystemObject
                                Fo.DeleteFile("success/" + fileName);
                            }
                            FoSuccess.MoveFile("temp/" + fileName, "success/" + fileName);

                            fileSuccCtr++;

                            importLogFile.writeLine(getMMDDYYYYHHmmSSsss() + "      Successfully imported tax return '" + fileName + "' to " + name + "!");
                            //alert("Successfully imported tax return '"+fileName+"' to "+name+"!");
                            //cancelHaveDiskModal();	

                        } else {
                            //Decrypted file is invalid, going to 'failed' 
                            Fo.MoveFile("temp/" + fileName, "failed/" + fileName.substring(0, fileName.indexOf(".")) + "-" + getMMDDYYYYHHmmSS() + "DP.xml");
                            importLogFile.writeLine(getMMDDYYYYHHmmSSsss() + "      Error Code DP2:  Decryption problem encountered! Please ensure that the filename '" + fileName + "' is correct and/or final copy.");
                            alert("Error Code:  DP \n\nDecryption problem encountered!\n\nPlease ensure that the filename '" + fileName + "' is correct and/or final copy.");
                            //cancelHaveDiskModal();									

                        }

                    }

                    fileContent = "";
                    decryptedFileContent = "";


                } else {
                    //Move file from 'temp' to 'failed'
                    Fo.MoveFile("temp/" + fileName, "failed/" + fileName.substring(0, fileName.indexOf(".")) + "-" + getMMDDYYYYHHmmSS() + "E.xml");
                    importLogFile.writeLine(getMMDDYYYYHHmmSSsss() + "      Error Code E:  The filename '" + fileName + "' submitted is empty!");
                    alert("Error Code:  E \n\nThe filename '" + fileName + "' submitted is empty!");
                    //cancelHaveDiskModal();
                } //size
                fileCtr++;
            } //for loop	

            //Move files from 'success' to 'IAF_RDO_Copy' or 'IAF_RDC_Copy'
            Fo.MoveFile("success/*", dirTarget + "/");
            importLogFile.writeLine(getMMDDYYYYHHmmSSsss() + "      Successfully imported " + fileSuccCtr + " out of " + fileCtr + " tax return(s) to " + name + "!\n\nFor details, go to 'logfile' subfolder of the application and view the latest file.");
            alert("Successfully imported " + fileSuccCtr + " out of " + fileCtr + " tax return(s) to " + name + "!\n\nFor details, go to 'logfile' subfolder of the application and view the latest file.");
            cancelHaveDiskModal();

        } //count	

    }

    function createProfileXML(decryptedFileContent, form) {
        try {

            var data;
            var fsoXML = new ActiveXObject("Scripting.FileSystemObject");

            var tin1 = "";
            var tin2 = "";
            var tin3 = "";
            var tin4 = "";
            var tpName = "";
            var rdo = "";
            var lob = "";
            var regAddr = "";
            var zip = "";
            var telNo = "";
            var formType = "";
            var forBlanks = "~ ~";


            if (form == "1602" || form == "1601E" || form == "1601EQ" || form == "1601F" || form == "1601FQ" || form == "2000" || form == "2200AN" || form == "2200M" || form == "1701A") {
                tin1 = String(decryptedFileContent).split('frm' + form + ':txtTIN1=');
                tin2 = String(decryptedFileContent).split('frm' + form + ':txtTIN2=');
                tin3 = String(decryptedFileContent).split('frm' + form + ':txtTIN3=');
                tin4 = String(decryptedFileContent).split('frm' + form + ':txtBranchCode=');
                tpName = String(decryptedFileContent).split('frm' + form + ':txtTaxpayerName=');
                rdo = String(decryptedFileContent).split('frm' + form + ':txtRDOCode=');
                lob = String(decryptedFileContent).split('frm' + form + ':txtLineBus=');
                regAddr = String(decryptedFileContent).split('frm' + form + ':txtAddress=');
                zip = String(decryptedFileContent).split('frm' + form + ':txtZipCode=');
                telNo = String(decryptedFileContent).split('frm' + form + ':txtTelNum=');
                formType = form;
				
			} else if (form == "1601Cv2018" || form == "2000v2018") {
                var trimForm = form.split('v')[0];

                tin1 = String(decryptedFileContent).split('frm' + trimForm.toLowerCase() + ':txtTIN1=');
                tin2 = String(decryptedFileContent).split('frm' + trimForm.toLowerCase() + ':txtTIN2=');
                tin3 = String(decryptedFileContent).split('frm' + trimForm.toLowerCase() + ':txtTIN3=');
                tin4 = String(decryptedFileContent).split('frm' + trimForm.toLowerCase() + ':txtBranchCode=');
                tpName = String(decryptedFileContent).split('frm' + trimForm.toLowerCase() + ':txtTaxpayerName=');
                rdo = String(decryptedFileContent).split('frm' + trimForm.toLowerCase() + ':txtRDOCode=');
                lob = String(decryptedFileContent).split('frm' + trimForm.toLowerCase() + ':txtLineBus=');
                regAddr = String(decryptedFileContent).split('frm' + trimForm.toLowerCase() + ':txtAddress=');
                zip = String(decryptedFileContent).split('frm' + trimForm.toLowerCase() + ':txtZipCode=');
                telNo = String(decryptedFileContent).split('frm' + trimForm.toLowerCase() + ':txtTelNum=');
                formType = form;

            } else if (form == "2200P" || form == "2200S" || form == "2200T") {
                tin1 = String(decryptedFileContent).split('frm' + form + ':txtTIN1=');
                tin2 = String(decryptedFileContent).split('frm' + form + ':txtTIN2=');
                tin3 = String(decryptedFileContent).split('frm' + form + ':txtTIN3=');
                tin4 = String(decryptedFileContent).split('frm' + form + ':txtBranchCode=');
                tpName = String(decryptedFileContent).split('frm' + form + ':taxpayerName=');
                rdo = String(decryptedFileContent).split('frm' + form + ':txtRDOCode=');
                lob = String(decryptedFileContent).split('frm' + form + ':txtLineBus=');
                regAddr = String(decryptedFileContent).split('frm' + form + ':txtAddress=');
                zip = String(decryptedFileContent).split('frm' + form + ':txtZipCode=');
                telNo = String(decryptedFileContent).split('frm' + form + ':txtTelNum=');
                formType = form;

            } else if (form == "0605" || form == "0619E" || form == "0619F" || form == "2200A") {
                tin1 = String(decryptedFileContent).split('frm' + form + ':txtTIN1=');
                tin2 = String(decryptedFileContent).split('frm' + form + ':txtTIN2=');
                tin3 = String(decryptedFileContent).split('frm' + form + ':txtTIN3=');
                tin4 = String(decryptedFileContent).split('frm' + form + ':txtBranchCode=');
                tpName = String(decryptedFileContent).split('frm' + form + ':txtTaxPayerName=');
                rdo = String(decryptedFileContent).split('frm' + form + ':txtRDOCode=');
                lob = String(decryptedFileContent).split('frm' + form + ':txtLineBus=');
                regAddr = String(decryptedFileContent).split('frm' + form + ':txtAddress=');
                zip = String(decryptedFileContent).split('frm' + form + ':txtZipCode=');
                telNo = String(decryptedFileContent).split('frm' + form + ':txtTelNum=');
                formType = form;

            } else if (form == "1600" || form == "1601C") {
                tin1 = String(decryptedFileContent).split('frm' + form.toLowerCase() + ':txtTIN1=');
                tin2 = String(decryptedFileContent).split('frm' + form.toLowerCase() + ':txtTIN2=');
                tin3 = String(decryptedFileContent).split('frm' + form.toLowerCase() + ':txtTIN3=');
                tin4 = String(decryptedFileContent).split('frm' + form.toLowerCase() + ':txtBranchCode=');
                tpName = String(decryptedFileContent).split('frm' + form.toLowerCase() + ':txtPayerName=');
                rdo = String(decryptedFileContent).split('frm' + form.toLowerCase() + ':txtRDOCode=');
                lob = String(decryptedFileContent).split('frm' + form.toLowerCase() + ':txtLineBus=');
                regAddr = String(decryptedFileContent).split('frm' + form.toLowerCase() + ':txtAddress=');
                zip = String(decryptedFileContent).split('frm' + form.toLowerCase() + ':txtZipCode=');
                telNo = String(decryptedFileContent).split('frm' + form.toLowerCase() + ':txtTelNum=');
                formType = form;
            } else if (form == "1600WP") {
                tin1 = String(decryptedFileContent).split('frm' + form + ':txtTIN1=');
                tin2 = String(decryptedFileContent).split('frm' + form + ':txtTIN2=');
                tin3 = String(decryptedFileContent).split('frm' + form + ':txtTIN3=');
                tin4 = String(decryptedFileContent).split('frm' + form + ':txtBranchCode=');
                tpName = String(decryptedFileContent).split('frm' + form + ':txtPayerName=');
                rdo = String(decryptedFileContent).split('frm' + form + ':txtRDOCode=');
                lob = forBlanks.split("~"); //String(decryptedFileContent).split('frm'+form+':txtLineBus='); 
                regAddr = String(decryptedFileContent).split('frm' + form + ':txtAddress=');
                zip = String(decryptedFileContent).split('frm' + form + ':txtZipCode=');
                telNo = forBlanks.split("~"); //String(decryptedFileContent).split('frm'+form+':txtTelNum='); 
                formType = form;

            } else if (form == "1701") {
                tpName = [];
                tin1 = String(decryptedFileContent).split('frm' + form + ':txtPg1Pt1I5TIN1=');
                tin2 = String(decryptedFileContent).split('frm' + form + ':txtPg1Pt1I5TIN2=');
                tin3 = String(decryptedFileContent).split('frm' + form + ':txtPg1Pt1I5TIN3=');
                tin4 = String(decryptedFileContent).split('frm' + form + ':txtTIN4=');
                var lName = String(decryptedFileContent).split('frm' + form + ':txtPg1Pt1I8TaxFiler=')[1];
                var fName = String(decryptedFileContent).split('frm' + form + ':txtPg1Pt1I8TaxFilerFirstName=')[1];
                var mName = String(decryptedFileContent).split('frm' + form + ':txtPg1Pt1I8TaxFilerMiddleName=')[1];
                if ($.trim(mName) !== '') {

                    tpName[1] = lName + ',' + fName + ',' + mName;

                } else {
                    tpName[1] = lName + ',' + fName;
                }
                rdo = String(decryptedFileContent).split('frm' + form + ':hdnPg1Pt1I6RDOCode=');
                lob = String(decryptedFileContent).split('frm' + form + ':txtPg1Pt1I17Business=');
                regAddr = String(decryptedFileContent).split('frm' + form + ':txtPg1Pt1I10Address=');
                zip = String(decryptedFileContent).split('frm' + form + ':txtZIP=');
                telNo = String(decryptedFileContent).split('frm' + form + ':txtPg1Pt1I13Contact=');
                formType = form;
				
				} else if (form == "1701v2018") {
                var trimForm = form.split('v')[0];

                tin1 = String(decryptedFileContent).split('frm' + trimForm.toLowerCase() + ':txtPg1I4TIN1=');
                tin2 = String(decryptedFileContent).split('frm' + trimForm.toLowerCase() + ':txtPg1I4TIN2=');
                tin3 = String(decryptedFileContent).split('frm' + trimForm.toLowerCase() + ':txtPg1I4TIN3=');
                tin4 = String(decryptedFileContent).split('frm' + trimForm.toLowerCase() + ':txtPg1I4BranchCode=');
                tpName = String(decryptedFileContent).split('frm' + trimForm.toLowerCase() + ':txtPg1I8TaxpayerName=');
                rdo = String(decryptedFileContent).split('frm' + trimForm.toLowerCase() + ':txtRDOCode=');
                lob = String(decryptedFileContent).split('frm' + trimForm.toLowerCase() + ':txtLineBus=');
                regAddr = String(decryptedFileContent).split('frm' + trimForm.toLowerCase() + ':txtPg1I9Address=');
                zip = String(decryptedFileContent).split('frm' + trimForm.toLowerCase() + ':txtPg1I9AZipCode=');
                telNo = String(decryptedFileContent).split('frm' + trimForm.toLowerCase() + ':txtPg1I15TelNum=');
                formType = form;

            } else if (form == "1702EX") {
                zip = [];
                tin1 = String(decryptedFileContent).split('frm' + form + ':txtPg1Pt1I6TINC1=');
                tin2 = String(decryptedFileContent).split('frm' + form + ':txtPg1Pt1I6TINC2=');
                tin3 = String(decryptedFileContent).split('frm' + form + ':txtPg1Pt1I6TINC3=');
                tin4 = String(decryptedFileContent).split('frm' + form + ':txtPg1Pt1I6TINC4=');
                tpName = String(decryptedFileContent).split('frm' + form + ':txtPg1Pt1I9RegisteredName=');
                rdo = String(decryptedFileContent).split('frm' + form + ':hdnPg1Pt1I7RDO=');
                lob = String(decryptedFileContent).split('frm' + form + ':txtPg1Pt1I13MainLine=');
                regAddr = String(decryptedFileContent).split('frm' + form + ':txtPg1Pt1I10RegisteredAddress=');
                zip[1] = '';
                telNo = String(decryptedFileContent).split('frm' + form + ':txtPg1Pt1I11ContactNumber=');
                formType = form;

            } else if (form == "1702MX") {
                tin1 = String(decryptedFileContent).split('frm' + form + ':txtPg1Pt1I6TINC1=');
                tin2 = String(decryptedFileContent).split('frm' + form + ':txtPg1Pt1I6TINC2=');
                tin3 = String(decryptedFileContent).split('frm' + form + ':txtPg1Pt1I6TINC3=');
                tin4 = String(decryptedFileContent).split('frm' + form + ':txtPg1Pt1I6TINC4=');
                tpName = String(decryptedFileContent).split('frm' + form + ':txtPg1Pt1I9RegisteredName=');
                rdo = String(decryptedFileContent).split('frm' + form + ':txtPg1Pt1I7RDO=');
                lob = String(decryptedFileContent).split('frm' + form + ':txtPg1Pt1I13MainLine=');
                regAddr = String(decryptedFileContent).split('frm' + form + ':txtPg1Pt1I10RegisteredAddress=');
                zip = String(decryptedFileContent).split('frm' + form + ':txtZIP=');
                telNo = String(decryptedFileContent).split('frm' + form + ':txtPg1Pt1I11ContactNumber=');
                formType = form;

            } else if (form == "1702RT") {
                tin1 = String(decryptedFileContent).split('frm' + form + ':txtPg1Pt1I6TIN1=');
                tin2 = String(decryptedFileContent).split('frm' + form + ':txtPg1Pt1I6TIN2=');
                tin3 = String(decryptedFileContent).split('frm' + form + ':txtPg1Pt1I6TIN3=');
                tin4 = String(decryptedFileContent).split('frm' + form + ':txtPg1Pt1I6TIN4=');
                tpName = String(decryptedFileContent).split('frm' + form + ':txtPg1Pt1I9Name=');
                rdo = String(decryptedFileContent).split('frm' + form + ':txtPg1Pt1I7RDO=');
                lob = String(decryptedFileContent).split('frm' + form + ':txtPg1Pt1I13Business=');
                regAddr = String(decryptedFileContent).split('frm' + form + ':txtPg1Pt1I10Address=');
                zip = String(decryptedFileContent).split('frm' + form + ':txtZIP=');
                telNo = String(decryptedFileContent).split('frm' + form + ':txtPg1Pt1I11Contact=');
                formType = form;

            } else if (form == "1603") {
                tin1 = String(decryptedFileContent).split('frm' + form + ':tinPart1=');
                tin2 = String(decryptedFileContent).split('frm' + form + ':tinPart2=');
                tin3 = String(decryptedFileContent).split('frm' + form + ':tinPart3=');
                tin4 = String(decryptedFileContent).split('frm' + form + ':branchCode=');
                tpName = String(decryptedFileContent).split('frm' + form + ':registeredName=');
                rdo = String(decryptedFileContent).split('frm' + form + ':rdoCode=');
                lob = String(decryptedFileContent).split('frm' + form + ':description=');
                regAddr = String(decryptedFileContent).split('frm' + form + ':registeredAddress=');
                zip = String(decryptedFileContent).split('frm' + form + ':zipCode=');
                telNo = String(decryptedFileContent).split('frm' + form + ':telephoneNumber=');
                formType = form;
				
			} else if (form == "1603Qv2018") {
				var trimForm = form.split('v')[0];
			
                tin1 = String(decryptedFileContent).split('frm' + trimForm + ':txtTIN1=');
                tin2 = String(decryptedFileContent).split('frm' + trimForm + ':txtTIN2=');
                tin3 = String(decryptedFileContent).split('frm' + trimForm + ':txtTIN3=');
                tin4 = String(decryptedFileContent).split('frm' + trimForm + ':txtBranchCode=');
                tpName = String(decryptedFileContent).split('frm' + trimForm + ':txtTaxpayerName=');
                rdo = String(decryptedFileContent).split('frm' + trimForm + ':rdoCode=');
                lob = String(decryptedFileContent).split('frm' + trimForm + ':txtLineBus=');
                regAddr = String(decryptedFileContent).split('frm' + trimForm + ':txtAddress=');
                zip = String(decryptedFileContent).split('frm' + trimForm + ':txtZipCode=');
                telNo = String(decryptedFileContent).split('frm' + trimForm + ':txtTelNum=');
                formType = form;
				
            } else if (form == "1604CF") {

                tin1 = String(decryptedFileContent).split('frm' + form.toLowerCase() + ':tinA=');
                tin2 = String(decryptedFileContent).split('frm' + form.toLowerCase() + ':tinB=');
                tin3 = String(decryptedFileContent).split('frm' + form.toLowerCase() + ':tinC=');
                tin4 = String(decryptedFileContent).split('frm' + form.toLowerCase() + ':branchCode=');
                tpName = String(decryptedFileContent).split('frm' + form.toLowerCase() + ':registeredName=');
                rdo = String(decryptedFileContent).split('frm' + form.toLowerCase() + ':rdoCode=');
                lob = String(decryptedFileContent).split('frm' + form.toLowerCase() + ':description=');
                regAddr = String(decryptedFileContent).split('frm' + form.toLowerCase() + ':registeredAddress=');
                zip = String(decryptedFileContent).split('frm' + form.toLowerCase() + ':zipCode=');
                telNo = String(decryptedFileContent).split('frm' + form.toLowerCase() + ':telephoneNumber=');
                formType = form;

            } else if (form == "1604E") {
                tin1 = String(decryptedFileContent).split('frm' + form.toLowerCase() + ':txtTIN1=');
                tin2 = String(decryptedFileContent).split('frm' + form.toLowerCase() + ':txtTIN2=');
                tin3 = String(decryptedFileContent).split('frm' + form.toLowerCase() + ':txtTIN3=');
                tin4 = String(decryptedFileContent).split('frm' + form.toLowerCase() + ':txtBranchCode=');
                tpName = String(decryptedFileContent).split('frm' + form.toLowerCase() + ':txtAgentname=');
                rdo = String(decryptedFileContent).split('frm' + form.toLowerCase() + ':txtRDOCode=');
                lob = String(decryptedFileContent).split('frm' + form.toLowerCase() + ':txtLineBus=');
                regAddr = String(decryptedFileContent).split('frm' + form.toLowerCase() + ':txtAddress=');
                zip = String(decryptedFileContent).split('frm' + form.toLowerCase() + ':txtZipCode=');
                telNo = String(decryptedFileContent).split('frm' + form.toLowerCase() + ':txtTelNum=');
                formType = form;
            } else if (form == "1606") {
                tin1 = String(decryptedFileContent).split('frm' + form + ':txtTIN1=');
                tin2 = String(decryptedFileContent).split('frm' + form + ':txtTIN2=');
                tin3 = String(decryptedFileContent).split('frm' + form + ':txtTIN3=');
                tin4 = String(decryptedFileContent).split('frm' + form + ':txtBranchCode=');
                tpName = String(decryptedFileContent).split('frm' + form + ':txtBuyerName=');
                rdo = String(decryptedFileContent).split('frm' + form + ':txtRDOCode=');
                lob = forBlanks.split("~"); //lob = String(decryptedFileContent).split('frm'+form+':description='); N/A
                regAddr = String(decryptedFileContent).split('frm' + form + ':txtBuyerAddress=');
                zip = forBlanks.split("~"); //String(decryptedFileContent).split('frm'+form+':zipCode='); N/A
                telNo = forBlanks.split("~"); //telNo = String(decryptedFileContent).split('frm'+form+':telephoneNumber='); N/A
                formType = form;
            } else if (form == "1700") {
                tpName = [];
                regAddr = [];
                tin1 = String(decryptedFileContent).split('frm' + form + ':txtPg1Pt1I5TIN1=');
                tin2 = String(decryptedFileContent).split('frm' + form + ':txtPg1Pt1I5TIN2=');
                tin3 = String(decryptedFileContent).split('frm' + form + ':txtPg1Pt1I5TIN3=');
                tin4 = String(decryptedFileContent).split('frm' + form + ':txtPg1Pt1I5BranchCode=');
                var lName = String(decryptedFileContent).split('frm' + form + ':txtPg1Pt1I8TaxFilerLastName=')[1];
                var fName = String(decryptedFileContent).split('frm' + form + ':txtPg1Pt1I8TaxFilerFirstName=')[1];
                var mName = String(decryptedFileContent).split('frm' + form + ':txtPg1Pt1I8TaxFilerMiddleName=')[1];
                if ($.trim(mName) !== '') {

                    tpName[1] = lName + ',' + fName + ',' + mName;

                } else {
                    tpName[1] = lName + ',' + fName;
                }

                rdo = String(decryptedFileContent).split('frm' + form + ':txtPg1Pt1I6RDOCode=');
                lob = forBlanks.split("~"); //lob = String(decryptedFileContent).split('frm'+form+':txtLineBus=');
                var address1 = String(decryptedFileContent).split('frm' + form + ':txtPg1Pt1I9Address1=')[1];
                var address2 = String(decryptedFileContent).split('frm' + form + ':txtPg1Pt1I9Address2=')[1];
                var address3 = String(decryptedFileContent).split('frm' + form + ':txtPg1Pt1I9Address3=')[1];
                regAddr[1] = address1 + address2 + address3;
                zip = String(decryptedFileContent).split('frm' + form + ':zipContainer=');
                telNo = String(decryptedFileContent).split('frm' + form + ':txtPg1Pt1I12ContactNo=');
                formType = form;

            } else if (form == "1707") {
                tin1 = String(decryptedFileContent).split('frm' + form + ':TIN1=');
                tin2 = String(decryptedFileContent).split('frm' + form + ':TIN2=');
                tin3 = String(decryptedFileContent).split('frm' + form + ':TIN3=');
                tin4 = String(decryptedFileContent).split('frm' + form + ':TIN4=');
                tpName = String(decryptedFileContent).split('frm' + form + ':txtI8SellerName=');
                rdo = String(decryptedFileContent).split('frm' + form + ':hdnRDO=');
                lob = forBlanks.split("~"); //lob = String(decryptedFileContent).split('frm'+form+':txtLineBus=');
                regAddr = String(decryptedFileContent).split('frm' + form + ':txtI9RegisteredAddress=');
                zip = String(decryptedFileContent).split('frm' + form + ':txtI10ZipCode=');
                telNo = forBlanks.split("~"); //telNo = String(decryptedFileContent).split('frm'+form+':txtTelNum=');
                formType = form;
            } else if (form == "1707A") {
                tin1 = String(decryptedFileContent).split('frm' + form + ':txtTIN1=');
                tin2 = String(decryptedFileContent).split('frm' + form + ':txtTIN2=');
                tin3 = String(decryptedFileContent).split('frm' + form + ':txtTIN3=');
                tin4 = String(decryptedFileContent).split('frm' + form + ':txtBranchCode=');
                tpName = String(decryptedFileContent).split('frm' + form + ':txtI8RegisteredName=');
                rdo = String(decryptedFileContent).split('frm' + form + ':hdnRDO=');
                lob = String(decryptedFileContent).split('frm' + form + ':txtLineOfBusiness='); //forBlanks.split("~");
                regAddr = String(decryptedFileContent).split('frm' + form + ':txtI9RegisteredAddress=');
                zip = String(decryptedFileContent).split('frm' + form + ':txtI10ZipCode=');
                telNo = String(decryptedFileContent).split('frm' + form + ':txtI7TelNo='); //forBlanks.split("~");
                formType = form;
            } else if (form == "1701Q") {
                tin1 = String(decryptedFileContent).split('frm' + form.toLowerCase() + ':txt5TIN1=');
                tin2 = String(decryptedFileContent).split('frm' + form.toLowerCase() + ':txt5TIN2=');
                tin3 = String(decryptedFileContent).split('frm' + form.toLowerCase() + ':txt5TIN3=');
                tin4 = String(decryptedFileContent).split('frm' + form.toLowerCase() + ':txt5BranchCode=');
                tpName = String(decryptedFileContent).split('frm' + form.toLowerCase() + ':txtTaxPayername=');
                rdo = String(decryptedFileContent).split('frm' + form.toLowerCase() + ':txt5RDOCode=');
                lob = String(decryptedFileContent).split('frm' + form.toLowerCase() + ':txt19=');
                regAddr = String(decryptedFileContent).split('frm' + form.toLowerCase() + ':txt11Address=');
                zip = String(decryptedFileContent).split('frm' + form.toLowerCase() + ':txt14zip=');
                telNo = String(decryptedFileContent).split('frm' + form.toLowerCase() + ':txt15Telno=');
                formType = form;

			} else if (form == "1701Qv2018") {
				var trimForm = form.split('v')[0];
			
                tin1 = String(decryptedFileContent).split('frm' + trimForm.toLowerCase() + ':txtTIN1=');
                tin2 = String(decryptedFileContent).split('frm' + trimForm.toLowerCase() + ':txtTIN2=');
                tin3 = String(decryptedFileContent).split('frm' + trimForm.toLowerCase() + ':txtTIN3=');
                tin4 = String(decryptedFileContent).split('frm' + trimForm.toLowerCase() + ':txtBranchCode=');
                tpName = String(decryptedFileContent).split('frm' + trimForm.toLowerCase() + ':txtTaxpayerName=');
                rdo = String(decryptedFileContent).split('frm' + trimForm.toLowerCase() + ':txtRDOCode=');
                lob = String(decryptedFileContent).split('frm' + trimForm.toLowerCase() + ':txtLOB=');
                regAddr = String(decryptedFileContent).split('frm' + trimForm.toLowerCase() + ':txtAddress=');
                zip = String(decryptedFileContent).split('frm' + trimForm.toLowerCase() + ':txtZipCode=');
                telNo = String(decryptedFileContent).split('frm' + trimForm.toLowerCase() + ':txtTelno=');
                formType = form;

            } else if (form == "1702") {
                tin1 = String(decryptedFileContent).split('frm' + form + ':txtTIN1=');
                tin2 = String(decryptedFileContent).split('frm' + form + ':txtTIN2=');
                tin3 = String(decryptedFileContent).split('frm' + form + ':txtTIN3=');
                tin4 = String(decryptedFileContent).split('frm' + form + ':txtBranchCode=');
                tpName = String(decryptedFileContent).split('frm' + form + ':txtTaxpayerName=');
                rdo = String(decryptedFileContent).split('frm' + form + ':txtRDOCode=');
                lob = String(decryptedFileContent).split('frm' + form + ':txtLineBus=');
                regAddr = String(decryptedFileContent).split('frm' + form + ':txtAddress=');
                zip = String(decryptedFileContent).split('frm' + form + ':txtZipCode=');
                telNo = forBlanks.split("~"); //telNo = String(decryptedFileContent).split('frm'+form+':txtTelNum=');
                formType = form;

            } else if (form == "1702Q") {
                tin1 = String(decryptedFileContent).split('frm' + form.toLowerCase() + ':txtTin1=');
                tin2 = String(decryptedFileContent).split('frm' + form.toLowerCase() + ':txtTin2=');
                tin3 = String(decryptedFileContent).split('frm' + form.toLowerCase() + ':txtTin3=');
                tin4 = String(decryptedFileContent).split('frm' + form.toLowerCase() + ':txtBranchCode=');
                tpName = String(decryptedFileContent).split('frm' + form.toLowerCase() + ':txtTaxpayerName=');
                rdo = String(decryptedFileContent).split('frm' + form.toLowerCase() + ':txtRdoCode=');
                lob = String(decryptedFileContent).split('frm' + form.toLowerCase() + ':txtDescription=');
                regAddr = String(decryptedFileContent).split('frm' + form.toLowerCase() + ':txtTaxPayerAdd=');
                zip = String(decryptedFileContent).split('frm' + form.toLowerCase() + ':txtTaxPayerZip=');
                telNo = String(decryptedFileContent).split('frm' + form.toLowerCase() + ':txtTelNum=');
                formType = form;

            } else if (form == "1704") {
                tin1 = String(decryptedFileContent).split('frm' + form + ':txtTin1=');
                tin2 = String(decryptedFileContent).split('frm' + form + ':txtTin2=');
                tin3 = String(decryptedFileContent).split('frm' + form + ':txtTin3=');
                tin4 = String(decryptedFileContent).split('frm' + form + ':txtBranch=');
                tpName = String(decryptedFileContent).split('frm' + form + ':txtName=');
                rdo = String(decryptedFileContent).split('frm' + form + ':txtRDOCode=');
                lob = String(decryptedFileContent).split('frm' + form + ':txtLineBus=');
                regAddr = String(decryptedFileContent).split('frm' + form + ':txtAddress=');
                zip = String(decryptedFileContent).split('frm' + form + ':txtZipCode=');
                telNo = forBlanks.split("~"); //telNo = String(decryptedFileContent).split('frm'+form+':txtTelNum=');
                formType = form;

            } else if (form == "1706") {
                tin1 = String(decryptedFileContent).split('frm' + form + ':txtTIN1=');
                tin2 = String(decryptedFileContent).split('frm' + form + ':txtTIN2=');
                tin3 = String(decryptedFileContent).split('frm' + form + ':txtTIN3=');
                tin4 = String(decryptedFileContent).split('frm' + form + ':txtBranchCode=');
                tpName = String(decryptedFileContent).split('frm' + form + ':txtSellerName=');
                rdo = String(decryptedFileContent).split('frm' + form + ':txtRDOCode=');
                lob = forBlanks.split("~"); //lob = String(decryptedFileContent).split('frm'+form+':txtLineBus=');
                regAddr = String(decryptedFileContent).split('frm' + form + ':txtSellerAddress=');
                zip = forBlanks.split("~"); //zip = String(decryptedFileContent).split('frm'+form+':txtSellerZipCode=');
                telNo = forBlanks.split("~"); //telNo = String(decryptedFileContent).split('frm'+form+':txtTelNum=');
                formType = form;
            } else if (form == "2000OT") {
                tin1 = String(decryptedFileContent).split('frm' + form + ':txtTIN1=');
                tin2 = String(decryptedFileContent).split('frm' + form + ':txtTIN2=');
                tin3 = String(decryptedFileContent).split('frm' + form + ':txtTIN3=');
                tin4 = String(decryptedFileContent).split('frm' + form + ':txtBranchCode=');
                tpName = String(decryptedFileContent).split('frm' + form + ':txtTaxpayerName=');
                rdo = String(decryptedFileContent).split('frm' + form + ':txtRDOCode=');
                lob = forBlanks.split("~"); //lob = String(decryptedFileContent).split('frm'+form+':txtLineBus=');
                regAddr = String(decryptedFileContent).split('frm' + form + ':txtAddress=');
                zip = String(decryptedFileContent).split('frm' + form + ':txtZipCode=');
                telNo = String(decryptedFileContent).split('frm' + form + ':txtTelNum=');
                formType = form;

            } else if (form == "1800") {
                tin1 = String(decryptedFileContent).split('frm' + form + ':txtDonorTIN1=');
                tin2 = String(decryptedFileContent).split('frm' + form + ':txtDonorTIN2=');
                tin3 = String(decryptedFileContent).split('frm' + form + ':txtDonorTIN3=');
                tin4 = String(decryptedFileContent).split('frm' + form + ':txtDonorBranchCode=');
                tpName = String(decryptedFileContent).split('frm' + form + ':txtDonorName=');
                rdo = String(decryptedFileContent).split('frm' + form + ':txtRDOCode=');
                lob = forBlanks.split("~"); //lob = String(decryptedFileContent).split('frm'+form+':txtLineBus=');
                regAddr = String(decryptedFileContent).split('frm' + form + ':txtAddress1=');
                zip = String(decryptedFileContent).split('frm' + form + ':txtZipCode1=');
                telNo = String(decryptedFileContent).split('frm' + form + ':txtTelNum=');
                formType = form;

            } else if (form == "1801") {
                tin1 = String(decryptedFileContent).split('frm' + form + ':txtTIN1=');
                tin2 = String(decryptedFileContent).split('frm' + form + ':txtTIN2=');
                tin3 = String(decryptedFileContent).split('frm' + form + ':txtTIN3=');
                tin4 = String(decryptedFileContent).split('frm' + form + ':txtBranchCode=');
                tpName = String(decryptedFileContent).split('frm' + form + ':txtTaxpayer=');
                rdo = String(decryptedFileContent).split('frm' + form + ':txtRDOCode=');
                lob = forBlanks.split("~"); //lob = String(decryptedFileContent).split('frm'+form+':txtLineBus=');
                regAddr = String(decryptedFileContent).split('frm' + form + ':txtResidence=');
                zip = String(decryptedFileContent).split('frm' + form + ':txtZip=');
                telNo = String(decryptedFileContent).split('frm' + form + ':txtTelephone=');
                formType = form;

            } else if (form == "2552") {
                tin1 = String(decryptedFileContent).split('frm' + form + ':txtTIN1=');
                tin2 = String(decryptedFileContent).split('frm' + form + ':txtTIN2=');
                tin3 = String(decryptedFileContent).split('frm' + form + ':txtTIN3=');
                tin4 = String(decryptedFileContent).split('frm' + form + ':txtBranchCode=');
                tpName = String(decryptedFileContent).split('frm' + form + ':txtNameStockBrocker=');
                rdo = String(decryptedFileContent).split('frm' + form + ':txtRDOCode=');
                lob = forBlanks.split("~"); //lob = String(decryptedFileContent).split('frm'+form+':txtLineBus=');
                regAddr = String(decryptedFileContent).split('frm' + form + ':txtAddress=');
                zip = String(decryptedFileContent).split('frm' + form + ':txtZipCode=');
                telNo = String(decryptedFileContent).split('frm' + form + ':txtTelNum=');
                formType = form;

            } else if (form == "2551M") {
                tin1 = String(decryptedFileContent).split('frm' + form.toLowerCase() + ':txtTIN1=');
                tin2 = String(decryptedFileContent).split('frm' + form.toLowerCase() + ':txtTIN2=');
                tin3 = String(decryptedFileContent).split('frm' + form.toLowerCase() + ':txtTIN3=');
                tin4 = String(decryptedFileContent).split('frm' + form.toLowerCase() + ':txtBranchCode=');
                tpName = String(decryptedFileContent).split('frm' + form.toLowerCase() + ':txtTaxPayerName=');
                rdo = String(decryptedFileContent).split('frm' + form.toLowerCase() + ':txtRDOCode=');
                lob = String(decryptedFileContent).split('frm' + form.toLowerCase() + ':txtLineOfBusiness=');
                regAddr = String(decryptedFileContent).split('frm' + form.toLowerCase() + ':txtAddress=');
                zip = String(decryptedFileContent).split('frm' + form.toLowerCase() + ':txtZipCode=');
                telNo = String(decryptedFileContent).split('frm' + form.toLowerCase() + ':txtTelNum=');
                formType = form;

            } else if (form == "2551") {
                tin1 = String(decryptedFileContent).split('frm' + form + ':txtTIN1=');
                tin2 = String(decryptedFileContent).split('frm' + form + ':txtTIN2=');
                tin3 = String(decryptedFileContent).split('frm' + form + ':txtTIN3=');
                tin4 = String(decryptedFileContent).split('frm' + form + ':txtBranchCode=');
                tpName = String(decryptedFileContent).split('frm' + form + ':registeredName=');
                rdo = String(decryptedFileContent).split('frm' + form + ':txtRDOCode=');
                lob = String(decryptedFileContent).split('frm' + form + ':txtLineofBus=');
                regAddr = String(decryptedFileContent).split('frm' + form + ':registeredAddress=');
                zip = String(decryptedFileContent).split('frm' + form + ':zipCode=');
                telNo = String(decryptedFileContent).split('frm' + form + ':telNo=');
                formType = form;

            } else if (form == "2551Qv2018") {
                tin1 = String(decryptedFileContent).split('frm' + form + ':txtTIN1=');
                tin2 = String(decryptedFileContent).split('frm' + form + ':txtTIN2=');
                tin3 = String(decryptedFileContent).split('frm' + form + ':txtTIN3=');
                tin4 = String(decryptedFileContent).split('frm' + form + ':txtBranchCode=');
                tpName = String(decryptedFileContent).split('frm' + form + ':registeredName=');
                rdo = String(decryptedFileContent).split('frm' + form + ':txtRDOCode=');
                //lob = String(decryptedFileContent).split('frm' + form + ':txtLineofBus=');
                regAddr = String(decryptedFileContent).split('frm' + form + ':registeredAddress=');
                zip = String(decryptedFileContent).split('frm' + form + ':zipCode=');
                telNo = String(decryptedFileContent).split('frm' + form + ':telNo=');
                formType = form;

            } else if (form == "2550Q") {
                tin1 = String(decryptedFileContent).split('frm' + form.toLowerCase() + ':txtTIN1=');
                tin2 = String(decryptedFileContent).split('frm' + form.toLowerCase() + ':txtTIN2=');
                tin3 = String(decryptedFileContent).split('frm' + form.toLowerCase() + ':txtTIN3=');
                tin4 = String(decryptedFileContent).split('frm' + form.toLowerCase() + ':txtBranchCode=');
                tpName = String(decryptedFileContent).split('frm' + form.toLowerCase() + ':TaxPayer=');
                rdo = String(decryptedFileContent).split('frm' + form.toLowerCase() + ':txtRDOCode=');
                lob = String(decryptedFileContent).split('frm' + form.toLowerCase() + ':txtLineBus=');
                regAddr = String(decryptedFileContent).split('frm' + form.toLowerCase() + ':txtAddress=');
                zip = String(decryptedFileContent).split('frm' + form.toLowerCase() + ':txtZipCode=');
                telNo = String(decryptedFileContent).split('frm' + form.toLowerCase() + ':txtTelNum=');
                formType = form;

            } else if (form == "2550M") {
                tin1 = String(decryptedFileContent).split('frm' + form.toLowerCase() + ':txtTIN1=');
                tin2 = String(decryptedFileContent).split('frm' + form.toLowerCase() + ':txtTIN2=');
                tin3 = String(decryptedFileContent).split('frm' + form.toLowerCase() + ':txtTIN3=');
                tin4 = String(decryptedFileContent).split('frm' + form.toLowerCase() + ':txtBranchCode=');
                tpName = String(decryptedFileContent).split('frm' + form.toLowerCase() + ':txtTaxPayerName=');
                rdo = String(decryptedFileContent).split('frm' + form.toLowerCase() + ':txtRDOCode=');
                lob = String(decryptedFileContent).split('frm' + form.toLowerCase() + ':txtLineBus=');
                regAddr = String(decryptedFileContent).split('frm' + form.toLowerCase() + ':txtAddress=');
                zip = String(decryptedFileContent).split('frm' + form.toLowerCase() + ':txtZipCode=');
                telNo = String(decryptedFileContent).split('frm' + form.toLowerCase() + ':txtTelephoneNum=');
                formType = form;

            } else if (form == "2553") {
                tin1 = String(decryptedFileContent).split('frm' + form + ':txtTIN1=');
                tin2 = String(decryptedFileContent).split('frm' + form + ':txtTIN2=');
                tin3 = String(decryptedFileContent).split('frm' + form + ':txtTIN3=');
                tin4 = String(decryptedFileContent).split('frm' + form + ':txtBranchCode=');
                tpName = String(decryptedFileContent).split('frm' + form + ':txtTPName=');
                rdo = String(decryptedFileContent).split('frm' + form + ':txtRDOCode=');
                lob = String(decryptedFileContent).split('frm' + form + ':txtDescription=');
                regAddr = String(decryptedFileContent).split('frm' + form + ':txtAddress=');
                zip = String(decryptedFileContent).split('frm' + form + ':txtZipCode=');
                telNo = String(decryptedFileContent).split('frm' + form + ':txtTelNum=');
                formType = form;

            }

            var allXML = "<?xml version='1.0'?>",
                tab = d.getElementById('xmlFormat').innerHTML;
            allXML += tab; //adds line break
            allXML += "<div>fn=" + tpName[1] + "fn=</div>" + tab;
            allXML += "<div>tin1=" + tin1[1] + "tin1=</div>" + tab;
            allXML += "<div>tin2=" + tin2[1] + "tin2=</div>" + tab;
            allXML += "<div>tin3=" + tin3[1] + "tin3=</div>" + tab;
            allXML += "<div>tin4=" + tin4[1] + "tin4=</div>" + tab;
            allXML += "<div>rdo=" + rdo[1] + "rdo=</div>" + tab;
            allXML += "<div>lob=" + lob[1] + "lob=</div>" + tab;
            allXML += "<div>regAddr=" + regAddr[1] + "regAddr=</div>" + tab;
            allXML += "<div>zip=" + zip[1] + "zip=</div>" + tab;
            allXML += "<div>telNo=" + telNo[1] + "telNo=</div>" + tab;
            allXML += "<div>formType=" + form + "formType=</div>" + tab;
            allXML += tab + d.getElementById('xmlClose').innerHTML;

            return allXML;
        } catch (e) {
            alert("Exception Thrown : " + e.message);
            return;
        }
    }

    function adminNotice(mode) {

        if (confirm("BIR Note!\n\n This feature is intended for authorized BIR personnel only.\nClick 'OK' if you wish to proceed.")) {
            if (mode == 'I') {
                showModalImportX();
            } else {

                if (confirm('Do you want to export tax returns in USB flash drive or CD-RW?')) {
                    showModalExport();
                } else {
                    exportLogFile = Fo.CreateTextFile("logfile/export-" + getMMDDYYYYHHmmSS() + ".log");
                    exportLogFile.writeLine("------------------------------------------------------------");
                    exportLogFile.writeLine(getMMDDYYYYHHmmSSsss() + "      Export job started...");

                    var where = exportWhere();
                    exportFilesInC(where);
                    //exportLogFile.writeLine(getMMDDYYYYHHmmSSsss()+"      You have not saved the tax return(s) to either your USB flash drive or CD-RW.  In case you want to submit it via email, you may locate the file(s) under : 'C:\\IAF_"+where+"_Copy'");	
                    //alert("You have not saved the tax return(s) to either your USB flash drive or CD-RW.\n\n In case you want to submit it via email,\nyou may locate the file(s) under : 'C:\\IAF_"+where+"_Copy'");
                    cancelHaveDiskXModal();

                    exportLogFile.writeLine(getMMDDYYYYHHmmSSsss() + "      Export job terminated");
                    exportLogFile.writeLine("------------------------------------------------------------");
                    exportLogFile.close();
                }

            }
        }

    }

    function showModalExport() {
        document.getElementById('all_content').style.display = "none"; //mainContent
        $('#modalHaveDiskX').show('blind');
    }


    function processExport() {

        exportLogFile = Fo.CreateTextFile("logfile/export-" + getMMDDYYYYHHmmSS() + ".log");
        exportLogFile.writeLine("------------------------------------------------------------");
        exportLogFile.writeLine(getMMDDYYYYHHmmSSsss() + "      Export job started...");

        var exportFromTo = exportWhere();

        if (exportFromTo == rdc) {
            exportProcess(rdc, rdcDir, rdcArchive);
        } else if (exportFromTo == proj) {
            exportProcess(proj, projDir, projArchive);
        }

        exportLogFile.writeLine(getMMDDYYYYHHmmSSsss() + "      Export job terminated");
        exportLogFile.writeLine("------------------------------------------------------------");
        exportLogFile.close();
    }

    function exportWhere() {

        var fso = new ActiveXObject("Scripting.FileSystemObject");
        var rdoFolderExists = fso.FolderExists(rdcDir + "/");
        var rdcFolderExists = fso.FolderExists(projDir + "/");

        if (rdoFolderExists == true && rdcFolderExists == false) {
            return rdc;

        } else if (rdoFolderExists == false && rdcFolderExists == true) {
            return proj;

        } else if (rdoFolderExists == true && rdcFolderExists == true) {
            //Unlikely to happen since folderName creation are specific for TP, RDO and RDC.
            //However, test both folders which has files

            if (Fo.GetFolder(rdcDir + "/").Files.Count > 0 && Fo.GetFolder(projDir + "/").Files.Count <= 0) {
                return rdc;

            } else if (Fo.GetFolder(projDir + "/").Files.Count > 0 && Fo.GetFolder(rdcDir + "/").Files.Count <= 0) {
                return proj;

            } else if (Fo.GetFolder(projDir + "/").Files.Count <= 0 && Fo.GetFolder(rdcDir + "/").Files.Count <= 0) {
                //Unlikely error that user does not have both subfolders: 'IAF_RDO_Copy' and 'IAF_RDC_Copy'
                exportLogFile.writeLine(getMMDDYYYYHHmmSSsss() + "      Error Code ND:  No such file(s) found in the application directory!");
                alert("Error Code:  ND \n\nNo such file(s) found in the application directory!");
                cancelHaveDiskXModal();

            } else if (Fo.GetFolder(projDir + "/").Files.Count > 0 && Fo.GetFolder(rdcDir + "/").Files.Count > 0) {
                //Unlikely error that user got both subfolders: 'IAF_RDO_Copy' and 'IAF_RDC_Copy'
                exportLogFile.writeLine(getMMDDYYYYHHmmSSsss() + "      Could not proceed exporting files.  Application directory should only have tax return(s) either 'IAF_RDO_Copy' or 'IAF_RDC_Copy'.");
                alert("Could not proceed exporting files.\n\nApplication directory should only have tax return(s) either \n'IAF_RDO_Copy' or 'IAF_RDC_Copy'.");
                cancelHaveDiskXModal();

            }

        } else if (rdoFolderExists == false && rdcFolderExists == false) {
            exportLogFile.writeLine(getMMDDYYYYHHmmSSsss() + "      Error Code ND:  No such directory found in the application!");
            alert("Error Code:  ND \n\nNo such directory found in the application!");
            cancelHaveDiskXModal();
        }

    }

    function exportProcess(name, dir, archDir) {
        //dir (source/target): IAF_RDC_Copy (RDO), IAF_Proj_Copy (RDC)
        try {

            var drive = d.getElementById('driveSelectX').value;
            if (drive == '0') {
                exportLogFile.writeLine(getMMDDYYYYHHmmSSsss() + "      Error Code ND:  No such directory found in the application!");
                alert("Please select the drive name of your USB flash drive or CD-RW.");
                cancelHaveDiskXModal();
            }

            var fso, fldr;
            var sourceDir = dir + "/";
            var destDir = dir;
            fso = new ActiveXObject("Scripting.FileSystemObject");
            if (fso.FolderExists(sourceDir)) {
                if (fso.FolderExists(drive + destDir)) {
                    //do nothing here since folder already exists...				   
                } else {
                    fso.CreateFolder(drive + destDir);
                }

                //Deferred one-time copying of all files since this doesn't translate to a detailed logging
                //fso.CopyFile(sourceDir+"*", drive+destDir+"/");	  

                //--------------------------- PER FILE EXPORTING TO ACCOMMODATE BETTER LOGGING -----------------------------
                var fsObj = new Enumerator(fso.GetFolder(sourceDir).Files);
                var fileContent = "";
                var fileName = "";
                var formName = "";
                var fileCtr = 0;
                var fileSuccCtr = 0;

                for (i = 0; !fsObj.atEnd(); fsObj.moveNext()) {

                    if (fsObj.item().Size > 0) {
                        //Read File and check if Non-Compliant
                        fileName = fsObj.item().Name;
                        formName = fileName.substring(fileName.indexOf("-") + 1, fileName.lastIndexOf("-"));

                        fileLoop = fso.OpenTextFile(sourceDir + fileName, 1);
                        fileContent = fileLoop.ReadAll();
                        fileLoop.Close();

                        if (fileContent.indexOf("</div>") >= 0) { //Assume unencrypted file was submitted
                            //Move file from 'sourceDir' to 'failed'
                            fso.MoveFile(sourceDir + fileName, "failed/" + fileName.substring(0, fileName.indexOf(".")) + "-" + getMMDDYYYYHHmmSS() + "NC.xml");
                            exportLogFile.writeLine(getMMDDYYYYHHmmSSsss() + "      Error Code NC:  The file format submitted is non-compliant! Please ensure that the filename '" + fileName + "' is encrypted.");
                            alert("Error Code:  NC \n\nThe file format submitted is non-compliant!\n\nPlease ensure that the filename '" + fileName + "' is encrypted.");
                        } else {

                            //Successful decryption and data export, move encrypted file from 'sourceDir' to 'drive+destDir+"/"' //error
                            //Dev Note: To avoid 'unknown exception', 'drive+destDir+"/"' shouldn't have a duplicate of record from 'sourceDir'
                            //          or just test if drive+destDir+"/" got that duplicate name, if so then delete it first before moving

                            //if (fso.FileExists("drive+destDir+"/"/"+fileName)) {
                            if (fso.FileExists(drive + destDir + "/" + fileName)) {
                                //Remove existing drive+destDir+"/" file first, since there is no 'overwrite' feature in FileSystemObject
                                fso.DeleteFile(drive + destDir + "/" + fileName);
                            }
                            fso.CopyFile(sourceDir + fileName, drive + destDir + "/" + fileName);

                            fileSuccCtr++;

                            exportLogFile.writeLine(getMMDDYYYYHHmmSSsss() + "      Successfully exported tax return '" + fileName + "' to " + name + "!");
                            //alert("Successfully exported tax return '"+fileName+"' to "+name+"!");

                        }
                        fileContent = "";

                    } else {
                        //Move file from 'sourceDir' to 'failed'
                        fso.MoveFile(sourceDir + fileName, "failed/" + fileName.substring(0, fileName.indexOf(".")) + "-" + getMMDDYYYYHHmmSS() + "E.xml");
                        exportLogFile.writeLine(getMMDDYYYYHHmmSSsss() + "      Error Code E:  The filename '" + fileName + "' submitted is empty!");
                        alert("Error Code:  E \n\nThe filename '" + fileName + "' submitted is empty!");
                    } //size
                    fileCtr++;
                } //for loop	

                //Move files from sour 'dir' to 'IAF_RDC_Archive' or 'IAF_Proj_Archive'
                fso.MoveFile(dir + "/*", archDir + "/");
                exportLogFile.writeLine(getMMDDYYYYHHmmSSsss() + "      Successfully exported " + fileSuccCtr + " out of " + fileCtr + " tax return(s) to " + name + "!\n\nFor details, go to 'logfile' subfolder of the application and view the latest file.");
                alert("Successfully exported " + fileSuccCtr + " out of " + fileCtr + " tax return(s) to " + name + "!\n\nFor details, go to 'logfile' subfolder of the application and view the latest file.");
                cancelHaveDiskXModal();
                //--------------------------- PER FILE EXPORTING TO ACCOMMODATE BETTER LOGGING -----------------------------				

            } else {
                exportLogFile.writeLine(getMMDDYYYYHHmmSSsss() + "      Copy Failed. No such directory: " + sourceDir);
                alert("Copy Failed. No such directory: " + sourceDir);
                cancelHaveDiskXModal();
            }


            //exportLogFile.writeLine(getMMDDYYYYHHmmSSsss()+"      Successfully copied files to "+drive);
            //alert("Successfully copied files to "+drive);
            //cancelHaveDiskXModal(); 

        } catch (e) {
            //alert("No such drive or directory."); return;
            exportLogFile.writeLine(getMMDDYYYYHHmmSSsss() + "      Exception Thrown : " + e.message);
            alert('Exception Thrown : ' + e.message + '\n\nPlease contact your IAF System Administrator!');
            cancelHaveDiskXModal();
        }

    }

    function exportFilesInC(where) {
        try {
            var drive = "C:/";
            if (drive == '0') {
                exportLogFile.writeLine(getMMDDYYYYHHmmSSsss() + "      Please select the drive name of your USB flash drive or CD-RW.");
                alert("Please select the drive name of your USB flash drive or CD-RW.");
                cancelHaveDiskXModal();
            }

            var fso, fldr;
            var sourceDir = "IAF_" + where + "_Copy/";
            var destDir = "IAF_" + where + "_Copy";
            fso = new ActiveXObject("Scripting.FileSystemObject");
            if (fso.FolderExists(sourceDir)) {
                if (fso.FolderExists(drive + destDir)) {
                    //do nothing here...
                } else {
                    fso.CreateFolder(drive + destDir);
                }
                fso.CopyFile(sourceDir + "*", drive + destDir + "/");

                exportLogFile.writeLine(getMMDDYYYYHHmmSSsss() + "      Successfully copied files to " + drive);
                alert("Successfully copied files to " + drive);
                cancelHaveDiskXModal();

            } else {
                exportLogFile.writeLine(getMMDDYYYYHHmmSSsss() + "      Copy Failed. No such directory: " + sourceDir);
                alert("Copy Failed. No such directory: " + sourceDir);
                cancelHaveDiskXModal();
            }

            cancelHaveDiskXModal();

        } catch (e) {
            exportLogFile.writeLine(getMMDDYYYYHHmmSSsss() + "      No such drive or directory.");
            alert("No such drive or directory.");
            cancelHaveDiskXModal();
        }
    }

    function cancelExportModal() {
        if ($('#modalExport').css('display') != 'none') {
            document.getElementById('all_content').style.display = 'block';
            $('#modalExport').hide('blind');
        }
    }

    function showModalImportX() {
        document.getElementById('all_content').style.display = "none";
        $('#modalHaveDisk').show('blind');
    }

    function cancelHaveDiskXModal() {
        if ($('#modalHaveDiskX').css('display') != 'none') {
            document.getElementById('all_content').style.display = 'block';
            $('#modalHaveDiskX').hide('blind');
        }
    }

    function cancelHaveDiskModal() {
        if ($('#modalHaveDisk').css('display') != 'none') {
            document.getElementById('all_content').style.display = 'block';
            $('#modalHaveDisk').hide('blind');
        }
    }

    function encrypt(val) {

        //var bf = new Blowfish('i@f0ffl1n3F0rm$');
        //var ciphertext = bf.encrypt(val);
        var ciphertext = Aes.Ctr.encrypt(val, aesPW, 256);

        return ciphertext;
    }

    function decrypt(val) {
        //var bf = new Blowfish('i@f0ffl1n3F0rm$');
        //var plaintext = bf.decrypt(val);

        var plaintext = Aes.Ctr.decrypt(val, aesPW, 256);
        return plaintext;
    }

    ////////////////////////////  For 'Import All' Testing
    function saveBeforeExit() {

        var fName = validateXMLFileName();
        if (fName != null) {
            var y = confirm("Do you want to save the changes on this form before exit?");
            if (y) {
                fName1 = createXMLFileName();

                if (fName1 != null) {
                    saveXML(fName1);
                    try {
                        deleteTemp();
                        window.close();
                        self.close();
                    } catch (err) {
                        window.close();
                        self.close();
                    }
                }
            }
        } else {
            try {
                deleteTemp();
                window.close();
                self.close();
            } catch (err) {
                window.close();
                self.close();
            }
        }
    }

    function ShowContainer(param) {
        $('#' + param).show();
        //$('#container').hide();
    }

    function HideContainer(param) {
        if ($('#' + param).css('display') != 'none') {
            $('#' + param).hide();
        }
    }
    /*function saveBeforeExit() {
    	var y=confirm( "Do you want to save the changes on this form before exit?" );
    	if (y) {
    		fName = createXMLFileName();
    		
    		if (fName != null) {
    			saveXML(fName);
    			window.close(); self.close();
    		}
    	}
    }*/

    function closeIt() {
        event.returnValue = ""; // Any string value here forces a dialog box to appear before the window closes.
    }

    function checkOfflineVersion() {
    	if (qs('xmlReloadProfile') != null 
    			&& qs('xmlReloadProfile').indexOf('.xml') > -1
    			&& qs('formTyp') != null) {		
    		return;
    	}
        
        asyncCall(enviService.getVersionCheckWS('primary') + Math.random(), 
          	_checkofflineVersion, true);
        
        function asyncCall(url, callback, isPrimary) {
            var xmlHttp = new XMLHttpRequest();
            xmlHttp.onreadystatechange = function(e) {
        		if (this.readyState === 4) {
        			if (this.status === 200) {
        			    callback(this);
        			} else {
        			    if(isPrimary === true) {
        			        asyncCall(enviService.getVersionCheckWS('backup') + Math.random(), 
          			            _checkofflineVersion, false);
        			    }
        			}
        		}
            }
            xmlHttp.open('GET', url, true);
        	xmlHttp.send();
        }
        
        function _checkofflineVersion(xmlHttp) {
            var respXMLMsg = xmlHttp.responseText;
        	xmlHttp.abort();
        	if (respXMLMsg !== null && respXMLMsg !== '' && respXMLMsg.indexOf('version') > -1) {
        	    var respObj = eval('(function(){return ' + respXMLMsg + ';})()');
        		var message = respObj.message_63;
    
        		//show broadcast message
        		if(message !== undefined && message !== null && message !== '') {
        		    $('#broadcastMessageContent').append(message);		    
        			$('#all_content').hide();
        			$('#broadcastMessage').show();
        			$('#broadcastMsgCloseBtn').on('click', function() {
        			    $('#broadcastMessage').hide();
        			    $('#all_content').show();
        			    showLatestVersion(respObj.version);
        			});
        		} else {
        		    $('#all_content').show();
        		    showLatestVersion(respObj.version);
        		}
        	}
        }
        
        function showLatestVersion(latest) {
            var version = BIRViewOfflineForms.version;
    		if (version != latest) {
    			var thisVersion = version.split('.');
    			var latestVersion = latest.split('.');
    			
    			var countArr = 0;
    			if (thisVersion.length == latestVersion.length) {
    				var countArr = thisVersion.length;
    				var listofVal = new Array();
    				for (i = 0; i < countArr; i++) {
    					if (parseInt(thisVersion[i]) != parseInt(latestVersion[i])) {
    						listofVal.push(i);
    					}
    				}
    				var x = listofVal[0];
    				if (parseInt(thisVersion[x]) < parseInt(latestVersion[x])) {
    					/* var msg = "Your current installation is out of date. A newer version ("
    							+ latest
    							+ ") is already available.\n\nClick 'OK' to go directly to the download site.";
    					if (confirm(msg)) {
    						window.open("http://www.bir.gov.ph/index.php/eservices/ebirforms.html");
    					} */
    				    $('#versionCheckContent').append('<br/>Your current installation is out of date. A newer version (' + latest + ') is already available.<br/><br/>' +
							'<a href="http://www.bir.gov.ph/index.php/eservices/ebirforms.html" target="_blank"><b>Click here</b></a> to go directly to the download site.<br/><br/>');		    
    					$('#all_content').hide();
    					$('#versionCheck').show();
    					$('#versionChkCloseBtn').on('click', function() {
    					    $('#versionCheck').hide();
            			    $('#all_content').show();
            			});
    				}
    			} else {
    				var countArr = (thisVersion.length > latestVersion.length ? thisVersion.length
    						: latestVersion.length);
    				var listofVal = new Array();
    				for (i = 0; i < countArr; i++) {
    					var a = (thisVersion[i] === undefined ? '0'
    							: thisVersion[i]);
    					var b = (latestVersion[i] === undefined ? '0'
    							: latestVersion[i]);
    					if (parseInt(a) != parseInt(b)) {
    						listofVal.push(i);
    					}
    				}
		
    				var x = listofVal[0];
    				var a = (thisVersion[x] === undefined ? '0'
    						: thisVersion[x]);
    				var b = (latestVersion[x] === undefined ? '0'
    						: latestVersion[x]);
		
    				if (parseInt(a) < parseInt(b)) {
    					/* var msg = "Your current installation is out of date. A newer version ("
    							+ latest
    							+ ") is already available.\n\nClick 'OK' to go directly to the download site.";
    					if (confirm(msg)) {
    						window.open("http://www.bir.gov.ph/index.php/eservices/ebirforms.html");
    					} */
    				    $('#versionCheckContent').append('<br/>Your current installation is out of date. A newer version (' + latest + ') is already available.<br/><br/>' +
    						'<a href="http://www.bir.gov.ph/index.php/eservices/ebirforms.html" target="_blank"><b>Click here</b></a> to go directly to the download site.<br/><br/>');		    
    					$('#all_content').hide();
    					$('#broadcastMessage').show();
    					$('#versionChkCloseBtn').on('click', function() {
    					    $('#versionCheck').hide();
    					    $('#all_content').show();
            			});
    				}
    			}
    		}
        }
    }
    
    function validateEmail() {
        var mailformat = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/; //accepts single email only
		//var mailformat = /\b[a-zA-Z0-9._%+-]+@(?:[a-zA-Z0-9-]+\.)+[a-zA-Z]{2,4}\b/; //accepts multiple email, separated by comma 
		//var mailformat = /^\w+@(?:[a-zA-Z0-9-]+\.)+[a-zA-Z]{2,4}$/; //accepts single email only
        if (document.getElementById('txtEmail').value.match(mailformat) || document.getElementById('txtEmail').value == '') {
            return;
        } else
            alert("You have entered an invalid email address format!");
        document.getElementById('txtEmail').value = '';
        document.getElementById('txtEmail').focus();
    }

    function validateConfirmEmail() {
        var mailformat = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/; //accepts single email only
		//var mailformat = /\b[a-zA-Z0-9._%+-]+@(?:[a-zA-Z0-9-]+\.)+[a-zA-Z]{2,4}\b/; //accepts multiple email, separated by comma 
        //var mailformat = /^\w+@(?:[a-zA-Z0-9-]+\.)+[a-zA-Z]{2,4}$/; //accepts single email only
        if (document.getElementById('txtConfirmEmail').value.match(mailformat) || document.getElementById('txtConfirmEmail').value == '') {
            return;
        } else
            alert("You have entered an invalid email address format!");
        document.getElementById('txtConfirmEmail').value = '';
        document.getElementById('txtConfirmEmail').focus();
    }

    function validateConfirmBir() {
        var origTin = d.getElementById('tin1').value + d.getElementById('tin2').value + d.getElementById('tin3').value + d.getElementById('tin4').value;
        var confirmTin = d.getElementById('Confirmtin1').value + d.getElementById('Confirmtin2').value + d.getElementById('Confirmtin3').value + d.getElementById('Confirmtin4').value;

        var origEmail = d.getElementById('txtEmail').value;
        var confirmEmail = d.getElementById('txtConfirmEmail').value;

        if (origTin != confirmTin) {
            alert('Taxpayer Identification Number does not match with your Profile Information');
           
            return;
        }
        if (origEmail != confirmEmail) {
            alert('Email Address does not match with your Profile Information');
            
            return;
        }

       
        var xmlFileName = createXMLFileName();
        saveXML(xmlFileName);
        HideContainer('ebirConfirm');
        ShowContainer('sub_content');
    }

   
</script>

<BODY topmargin="0" leftmargin="0" onload="checkIEVersion();checkOfflineVersion();runOnce();">
<!-- <BODY topmargin="0" leftmargin="0" onload="checkIEVersion();runOnce();"> -->
    <!-- onbeforeunload="closeIt()"-->

    <ul class="topnav">
        <li>
            <a href="#" class='toplevel'>File</a>
            <ul class="subnav">
                <li><a href="#" onclick="saveXML(createXMLFileName());">Save</a></li>
                <!-- <li><a href="#" onclick="adminNotice('I');">Import All</a></li>  -->
                <!-- <li><a href="#" onclick="adminNotice('E');">Export All</a></li> -->
                <li><a href="#" onclick="saveBeforeExit();">Exit</a></li>
            </ul>
        </li>
        <li>
            <a href="#" class='toplevel'>Help</a>
            <style>
                .asubnav {
                    text-indent: 20px;
                }
            </style>
            <ul class="subnav">
                <li>
                    <ul class="atopnav">
                        <!--l3-->
                        <li>
                            <a href="#" class='atoplevel'>Documentary Stamp</a>
                            <ul class="asubnav" style="display:none;">
                                <li><a href="helpfile/Help2000.hta">BIR Form 2000</a></li>
								<li><a href="helpfile/Help2000v2018.hta">BIR Form 2000v2018</a></li>
                            </ul>
                        </li>
                    </ul>
                    <!--l3-->
                    <ul class="atopnav">
                        <!--l3-->
                        <li>
                            <a href="#" class='atoplevel'>Excise</a>
                            <ul class="asubnav" style="display:none;">
                                <li><a href="helpfile/Help2200A.hta">BIR Form 2200A</a></li>
                                <li><a href="helpfile/Help2200P.hta">BIR Form 2200P</a></li>
                                <li><a href="helpfile/Help2200S.hta">BIR Form 2200S</a></li>
                                <li><a href="helpfile/Help2200T.hta">BIR Form 2200T</a></li>
                                <li><a href="helpfile/Help2200AN.hta">BIR Form 2200AN</a></li>
                                <li><a href="helpfile/Help2200M.hta">BIR Form 2200M</a></li>
                            </ul>
                        </li>
                    </ul>
                    <!--l3-->
                    <ul class="atopnav">
                        <!--l3-->
                        <li>
                            <a href="#" class='atoplevel'>Income</a>
                            <ul class="asubnav" style="display:none;">
                                <li><a href="helpfile/Help1700.hta">BIR Form 1700</a></li>
                                <li><a href="helpfile/Help1701.hta">BIR Form 1701</a></li>
                                <li><a href="helpfile/Help1701Q.hta">BIR Form 1701Q</a></li>
								<li><a href="helpfile/Help1701Qv2018.hta">BIR Form 1701Qv2018</a></li>
                                <li><a href="helpfile/Help1704.hta">BIR Form 1704</a></li>
                                <li><a href="helpfile/Help1702Q.hta">BIR Form 1702Q</a></li>
                                <li><a href="helpfile/Help1702EX.hta">BIR Form 1702EX</a></li>
                                <li><a href="helpfile/Help1702MX.hta">BIR Form 1702MX</a></li>
                                <li><a href="helpfile/Help1702RT.hta">BIR Form 1702RT</a></li>
                            </ul>
                        </li>
                    </ul>
                    <!--l3-->
                    <ul class="atopnav">
                        <!--l3-->
                        <li>
                            <a href="#" class='atoplevel'>ONETT</a>
                            <ul class="asubnav" style="display:none;">
                                <li><a href="helpfile/Help1606.hta">BIR Form 1606</a></li>
                                <li><a href="helpfile/Help1706.hta">BIR Form 1706</a></li>
                                <li><a href="helpfile/Help1707.hta">BIR Form 1707</a></li>
                                <li><a href="helpfile/Help1707A.hta">BIR Form 1707A</a></li>
                                <li><a href="helpfile/Help1800.hta">BIR Form 1800</a></li>
                                <li><a href="helpfile/Help1801.hta">BIR Form 1801</a></li>
                                <li><a href="helpfile/Help2000-OT.hta">BIR Form 2000-OT</a></li>
                            </ul>
                        </li>
                    </ul>
                    <!--l3-->
                    <ul class="atopnav">
                        <!--l3-->
                        <li>
                            <a href="#" class='atoplevel'>Payment</a>
                            <ul class="asubnav" style="display:none;">
                                <li><a href="helpfile/Help0605.hta">BIR Form 0605</a></li>
                            </ul>
                        </li>
                    </ul>
                    <!--l3-->
                    <ul class="atopnav">
                        <!--l3-->
                        <li>
                            <a href="#" class='atoplevel'>Percentage</a>
                            <ul class="asubnav" style="display:none;">
                                <li><a href="helpfile/Help2551.hta">BIR Form 2551</a></li>
                                <li><a href="helpfile/Help2551Qv2018.hta">BIR Form 2551Qv2018</a></li>
                                <li><a href="helpfile/Help2551M.hta">BIR Form 2551M</a></li>
                                <li><a href="helpfile/Help2552.hta">BIR Form 2552</a></li>
                                <li><a href="helpfile/Help2553.hta">BIR Form 2553</a></li>
                            </ul>
                        </li>
                    </ul>
                    <!--l3-->
                    <ul class="atopnav">
                        <!--l3-->
                        <li>
                            <a href="#" class='atoplevel'>Value Added Tax</a>
                            <ul class="asubnav" style="display:none;">
                                <li><a href="helpfile/Help2550M.hta">BIR Form 2550M</a></li>
                                <li><a href="helpfile/Help2550Q.hta">BIR Form 2550Q</a></li>
                            </ul>
                        </li>
                    </ul>
                    <!--l3-->
                    <ul class="atopnav">
                        <!--l3-->
                        <li>
                            <a href="#" class='atoplevel'>Withholding</a>
                            <ul class="asubnav" style="display:none;">
                                <li><a href="helpfile/Help0619E.hta">BIR Form 0619E</a></li>
                                <li><a href="helpfile/Help0619F.hta">BIR Form 0619F</a></li>
                                <li><a href="helpfile/Help1601C.hta">BIR Form 1601C</a></li>
								<li><a href="helpfile/Help1601Cv2018.hta">BIR Form 1601Cv2018</a></li>
                                <li><a href="helpfile/Help1601E.hta">BIR Form 1601E</a></li>
                                <li><a href="helpfile/Help1601EQ.hta">BIR Form 1601EQ</a></li>
                                <li><a href="helpfile/Help1601F.hta">BIR Form 1601F</a></li>
                                <li><a href="helpfile/Help1601FQ.hta">BIR Form 1601FQ</a></li>
                                <li><a href="helpfile/Help1602.hta">BIR Form 1602</a></li>
								<li><a href="helpfile/Help1602Q.hta">BIR Form 1602Qv2018</a></li>
								<li><a href="helpfile/Help1603.hta">BIR Form 1603</a></li>
                                <li><a href="helpfile/Help1603Q.hta">BIR Form 1603Qv2018</a></li>
                                <li><a href="helpfile/Help1600.hta">BIR Form 1600</a></li>
                                <li><a href="helpfile/Help1600WP.hta">BIR Form 1600WP</a></li>
                                <li><a href="helpfile/Help1604CF.hta">BIR Form 1604CF</a></li>
                                <li><a href="helpfile/Help1604E.hta">BIR Form 1604E</a></li>
                            </ul>
                        </li>
                    </ul>
                    <!--l3-->
                </li>
            </ul>
        </li>
        <!--<li>
        	<a href="#" class='toplevel' >Test</a>
        	<ul class="subnav">   
                <li><a href="forms/file_upload_to_textarea.hta">Upload Tax Return</a></li>  
				<li><a href="forms/aes_test.hta">AES Encrypt / Decrypt</a></li>
            </ul> 
        </li>-->
        <!--<li><a href="#">Contact Us</a></li> -->
    </ul>
    <!--topnav-->
    <div style="position:fixed; top:10px; font-size:11px; z-index:1000000000000000; right:5px; width:auto;">Government Property Not For Sale</div>

    <!--title-->

    <div style="display:none;">
        <!--hidden form-->
        <input size=50 type=text id=search name=search class="Field" value="1700-333333333333-willierevill.xml">
        <input size=50 type=hidden value="savefile/" id='path' name='path' class="Field">
        <input type=button value="        Scan          " onclick=Scan() class="Field">
    </div>
    <img id="bg" src="img/bg_n.png" height="100%" align="top" />
    <!--watermark-->
    <img id="watermark" src="img/bir.png" width="800px" align="top" />
    <!--watermark-->

    <div id="all_content" style="display:block;">
        <!--start-->
        <div id="ebirConfirm" style="display:none; position: fixed; top:  32%; left: 30%; width:500px;
        right: auto; overflow-y: auto; overflow-x: hidden; background: #e2e2e2; padding: 20px; border:2px solid blue;">
            <div style="position: relative; width: 100%;">

                <span style="font-weight: bold; font-size: largerBold;"></span>

            </div>
            <div class="modalInner" style="width: 98%;">
                <table>
                    <tr>
                        <td><font color="red" size="3"><strong>*</strong></font> Confirm Taxpayer Identification Number:
                        </td>
                        <td>
                            <input type="text" size="3" maxlength="3" id="Confirmtin1" name="Confirmtin1" style="width:35px;" onkeypress="return wholenumber(this, event)" value="" onkeyup="" class="mainContent">
                            <span>-</span>
                            <input type="text" size="3" maxlength="3" id="Confirmtin2" name="Confirmtin2" style="width:35px;" onkeypress="return wholenumber(this, event)" value="" onkeyup="" class="mainContent">
                            <span>-</span>
                            <input type="text" size="3" maxlength="3" id="Confirmtin3" name="Confirmtin3" style="width:35px;" onkeypress="return wholenumber(this, event)" value="" onkeyup="" class="mainContent">
                            <span>-</span>
                            <input type="text" size="3" maxlength="3" value="" id="Confirmtin4" name="Confirmtin4" style="width:35px;" onkeypress="return wholenumber(event)" onkeyup="" onblur='' class="mainContent" />
                        </td>
                    </tr>
                    <tr>
                        <td><font color="red" size="3"><strong>*</strong></font> Confirm Email:
                        </td>
                        <td>
                            <input id="txtConfirmEmail" name="txtConfirmEmail" type="text" onblur="validateConfirmEmail()" onkeypress="" maxlength="100" style="width: 300px;" />
                        </td>
                    </tr>
                    <tr>
                        <td>
                        </td>
                        <td>
                            <input type="button" id="ebirConfirmSubmit" value="Submit" onclick="validateConfirmBir();" />
                            <input type="button" id="ebirConfirmCancel" value="Cancel" onclick="HideContainer('ebirConfirm'); ShowContainer('sub_content');" />
                        </td>
                    </tr>
                </table>
            </div>
        </div>
        <div id="sub_content" style="display:block;">
            <!--start-->
            <div class="modalHeader">Profile</div>

            <div class="break">
                <!--top-->
                <div class="inline first">
                    <span class="mainLabel"><font color="red" size="3"><strong>*</strong></font>Taxpayer Identification Number:</span>
                    <div class="inputs chkTin">
                        <input type="text" size="3" maxlength="3" id="tin1" name="tin1" style="width:35px;" onkeypress="return wholenumber(this, event)" onchange='Scan();' onblur='loadBGXML(this);' value="" onkeyup="Scan();" class="mainContent">
                        <label for="tin2">-</label>
                        <input type="text" size="3" maxlength="3" id="tin2" name="tin2" style="width:35px;" onkeypress="return wholenumber(this, event)" onchange='Scan();' onblur='loadBGXML(this);' value="" onkeyup="Scan();" class="mainContent">
                        <label for="tin3">-</label>
                        <input type="text" size="3" maxlength="3" id="tin3" name="tin3" style="width:35px;" onkeypress="return wholenumber(this, event)" onchange='Scan();' onblur='loadBGXML(this);' value="" onkeyup="Scan();" class="mainContent">
                        <label for="tin4">-</label>
                        <input type="text" size="3" maxlength="3" value="" id="tin4" name="tin4" style="width:35px;" onkeypress="return letternumber(event)" onchange='Scan();' onkeyup="Scan();" onblur='loadBGXML(this);' class="mainContent" />
                    </div>
                </div>

                <div class="inline RDO">
                    <span class="mainLabel">RDO Code:</span>
                    <div class="inputs">
                        <!--<input type="text" id='rdo' name='rdo' onkeyup="Scan();" onChange="Scan();" value="" class="mainContent" size="5" maxlength="4">-->
                        <select class="iceSelOneMnu" id="rdo" name="rdo" size="1">
                            <option value="000">(Select RDO)</option>
                        </select>
                        <!--<select class="iceSelOneMnu" id="rdo" name="rdo" size="1">
							<option value=""> - </option>
							<option value="001">001</option>
							<option value="002">002</option>
							<option value="003">003</option>
							<option value="004">004</option>
							<option value="005">005</option>
							<option value="006">006</option>
							<option value="007">007</option>
							<option value="008">008</option>
							<option value="009">009</option>
							<option value="010">010</option>
							<option value="011">011</option>
							<option value="012">012</option>
							<option value="013">013</option>
							<option value="014">014</option>
							<option value="015">015</option>
							<option value="016">016</option>
							<option value="17A">17A</option>
							<option value="17B">17B</option>
							<option value="018">018</option>
							<option value="019">019</option>
							<option value="020">020</option>
							<option value="21A">21A</option>
							<option value="21B">21B</option>
							<option value="022">022</option>
							<option value="23A">23A</option>
							<option value="23B">23B</option>
							<option value="024">024</option>
							<option value="25A">25A</option>
							<option value="25B">25B</option>
							<option value="026">026</option>
							<option value="027">027</option>
							<option value="028">028</option>
							<option value="029">029</option>
							<option value="030">030</option>
							<option value="031">031</option>
							<option value="032">032</option>
							<option value="033">033</option>
							<option value="034">034</option>
							<option value="035">035</option>
							<option value="036">036</option>
							<option value="037">037</option>
							<option value="038">038</option>
							<option value="039">039</option>
							<option value="040">040</option>
							<option value="041">041</option>
							<option value="042">042</option>
							<option value="43A">43A</option>
							<option value="43B">43B</option>
							<option value="044">044</option>
							<option value="045">045</option>
							<option value="046">046</option>
							<option value="047">047</option>
							<option value="048">048</option>
							<option value="049">049</option>
							<option value="050">050</option>
							<option value="051">051</option>
							<option value="052">052</option>
							<option value="53A">53A</option>
							<option value="53B">53B</option>
							<option value="54A">54A</option>
							<option value="54B">54B</option>
							<option value="055">055</option>
							<option value="056">056</option>
							<option value="057">057</option>
							<option value="058">058</option>
							<option value="059">059</option>
							<option value="060">060</option>
							<option value="061">061</option>
							<option value="062">062</option>
							<option value="063">063</option>
							<option value="064">064</option>
							<option value="065">065</option>
							<option value="066">066</option>
							<option value="067">067</option>
							<option value="068">068</option>
							<option value="069">069</option>
							<option value="070">070</option>
							<option value="071">071</option>
							<option value="072">072</option>
							<option value="073">073</option>
							<option value="074">074</option>
							<option value="075">075</option>
							<option value="076">076</option>
							<option value="077">077</option>
							<option value="078">078</option>
							<option value="079">079</option>
							<option value="080">080</option>
							<option value="081">081</option>
							<option value="082">082</option>
							<option value="083">083</option>
							<option value="084">084</option>
							<option value="085">085</option>
							<option value="086">086</option>
							<option value="087">087</option>
							<option value="088">088</option>
							<option value="089">089</option>
							<option value="090">090</option>
							<option value="091">091</option>
							<option value="092">092</option>
							<option value="93A">93A</option>
							<option value="93B">93B</option>
							<option value="094">094</option>
							<option value="095">095</option>
							<option value="096">096</option>
							<option value="097">097</option>
							<option value="098">098</option>
							<option value="099">099</option>
							<option value="100">100</option>
							<option value="101">101</option>
							<option value="102">102</option>
							<option value="103">103</option>
							<option value="104">104</option>
							<option value="105">105</option>
							<option value="106">106</option>
							<option value="107">107</option>
							<option value="108">108</option>
							<option value="109">109</option>
							<option value="110">110</option>
							<option value="111">111</option>
							<option value="112">112</option>
							<option value="113">113</option>
							<option value="114">114</option>
							<option value="115">115</option>
							<option value="116">116</option>
							<option value="117">117</option>
							<option value="118">118</option>
							<option value="119">119</option>
							<option value="120">120</option>
							<option value="121">121</option>
							<option value="122">122</option>
							<option value="123">123</option>
							<option value="124">124</option>
							<option value="125">125</option>
							<option value="126">126</option>
							<option value="132">132</option>

						</select>-->
                    </div>
                </div>

                <div class="inline middle last">
                    <span class="mainLabel">Line of Business:</span>
                    <div class="inputs">
                        <input type="text" id='lob' name='lob' onkeyup="Scan();" onChange="Scan();" value="" class="mainContent LOB" style="text-transform:uppercase;">
                    </div>
                </div>
            </div>
            <!--top-->

            <div class="break">
                <!--middle 1-->
                <span class="mainLabel">Taxpayer's Name (Last Name, First Name, Middle Name For Individual)<br/>
                    Registered Name (For Non-Individual) :
                </span>
                <div class="inputs">
                    <input type="text" id='fn' name='fn' onkeyup="Scan();" onChange="Scan();" value="" class="max" style="text-transform:uppercase;">
                </div>
            </div>
            <!--middle 1-->

            <div class="break">
                <!--middle 2-->
                <span class="mainLabel">Registered Address:</span>
                <div class="inputs">
                    <input type="text" id='regAddr' name='regAddr' onkeyup="Scan();" onChange="Scan();" value="" class="max" style="text-transform:uppercase;">
                </div>
            </div>
            <!--middle 2-->

            <div class="break">
                <!--middle-->
                <div class="inline middle ZCODE">
                    <span class="mainLabel">Zip Code:</span>
                    <div class="inputs">
                        <input type="text" size="4" maxlength="4" id="zip" name="zip" style="width:35px;" onkeypress="return wholenumber(this, event)" onchange='Scan();' value="" onkeyup="Scan();">
                    </div>
                </div>

                <div class="inline middle PNUM">
                    <span class="mainLabel">Telephone Number:</span>
                    <div class="inputs">
                        <input type="text" id='telNo' name='telNo' onkeypress="return wholenumber(this, event)" onkeyup="Scan();" onChange="Scan();" value="" class="mainContent" maxlength="15">
                    </div>
                </div>
            </div>
            <div class="break">
                <!--middle-->
                <div class="inline middle ZCODE">
                    <span class="mainLabel">Email Address:</span>
                    <div class="inputs">
                        <input id="txtEmail" name="txtEmail" type="text" onblur="validateEmail()" onkeypress="" maxlength="100" style="width: 98%;" />
                    </div>
                </div>


            </div>
            <span class="mainLabel"><span class="formTitle">List of BIR Forms:</span></span>
            <div class='break' id="middle" align="center">
                <!--form select-->
                <div style="clear:both;"></div>
                <div class="inputs">
                    <select id="formType" name="formType" onChange="Scan();" style="display:inline;" class="mainContent">
                        <option value="0"><i>{Please Select}...</i></option>
                        <option value="0605">BIR Form 0605 - Payment Form</option>
                        <option value="0619E">BIR Form 0619E - Monthly Remittance Form for Creditable Income Taxes Withheld (Expanded)</option>
                        <option value="0619F">BIR Form 0619F - Monthly Remittance Form for Final Income Taxes Withheld</option>
                        <option value="1600">BIR Form 1600 - Monthly Remittance Return of Value-Added Tax and Other Percentage Taxes Withheld</option>
                        <option value="1600WP">BIR Form 1600WP - Remittance Return of Percentage Tax on Winnings and Prizes...</option>
                        <option value="1601C">BIR Form 1601C - Monthly Remittance Return of Income Taxes Withheld on Compensation</option>
						<option value="1601Cv2018">BIR Form 1601Cv2018 - Monthly Remittance Return of Income Taxes Withheld on Compensation (NEW)</option>
                        <option value="1601E">BIR Form 1601E - Monthly Remittance Return of Creditable Income Taxes Withheld (Expanded)</option>
                        <option value="1601EQ">BIR Form 1601EQ - Quarterly Remittance Return of Creditable Income Taxes Withheld (Expanded)</option>
                        <option value="1601F">BIR Form 1601F - Monthly Remittance Return of Final Income Tax Withheld</option>
                        <option value="1601FQ">BIR Form 1601FQ - Quarterly Remittance Return of Final Income Tax Withheld</option>
                        <option value="1602">BIR Form 1602 - Monthly Remittance Return of Final Income Taxes Withheld</option>
                        <option value="1602Qv2018">BIR Form 1602Qv2018 - Quarterly Remittance Return of Final Taxes Withheld on Interest Paid on Deposits Substitutes/Trusts/Etc. (NEW)</option>
						<option value="1603">BIR Form 1603 - Quarterly Remittance Return of Final Income Taxes Withheld</option>
                        <option value="1603Qv2018">BIR Form 1603Qv2018 - Quarterly Remittance Return of Final Income Taxes Withheld on Fringe Benefits Paid to Employees Other Than Rank and File (NEW)</option>
						<option value="1604CF">BIR Form 1604CF - Annual Information Return of Income Taxes Withheld on Compensation</option>
                        <option value="1604E">BIR Form 1604E - Annual Information Return of Creditable Income Taxes Withheld</option>
                        <option value="1606">BIR Form 1606 - ONETT Withholding Tax Return</option>
                        <option value="1700">BIR Form 1700 - Annual Income Tax Return</option>
                        <option value="1701">BIR Form 1701 - Annual Income Tax Return</option>
						<option value="1701A">BIR Form 1701A - Annual Income Tax Return (NEW)</option>
						<option value="1701v2018">BIR Form 1701v2018 - Annual Income Tax Return (NEW)</option>
                        <option value="1701Q">BIR Form 1701Q - Quarterly Income Tax Return For Self-Employed Individuals, Estates and Trusts</option>
						<option value="1701Qv2018">BIR Form 1701Qv2018 - Quarterly Income Tax Return For Self-Employed Individuals, Estates and Trusts (NEW)</option>
                        <option value="1702EX">BIR Form 1702EX - Annual Income Tax Return (EXEMPT)</option>
                        <option value="1702MX">BIR Form 1702MX - Annual Income Tax Return (MIXED)</option>
                        <option value="1702RT">BIR Form 1702RT - Annual Income Tax Return (REGULAR)</option>
                        <option value="1702Q">BIR Form 1702Q - Quarterly income Tax Return</option>
                        <option value="1704">BIR Form 1704 - Improperly Accumulated Earnings Tax Return</option>
                        <option value="1706">BIR Form 1706 - ONETT Capital Gains Tax Return (Capital Asset)</option>
                        <option value="1707">BIR Form 1707 - ONETT Capital Gains Tax Return (Shares of Stock Not Traded Through LSE)</option>
                        <option value="1707A">BIR Form 1707A - Annual Capital Gains Tax Return(For Onerous Transfer of Shares of Stocks Not Traded Through the Local Stock Exchange)</option>
                        <option value="1800">BIR Form 1800 - ONETT Donor's Tax Return</option>
                        <option value="1801">BIR Form 1801 - ONETT Estate Tax Return</option>
                        <option value="2000">BIR Form 2000 - Documentary Stamp Tax Declaration/Return</option>
						<option value="2000v2018">BIR Form 2000v2018 - Monthly Documentary Stamp Tax Declaration/Return (NEW)</option>
                        <option value="2000OT">BIR Form 2000OT - Documentary Stamp Tax Declaration/Return (one-time transactions)</option>
                        <option value="2200A">BIR Form 2200A - Excise Tax Return for Alcohol Products</option>
                        <option value="2200AN">BIR Form 2200AN - Excise Tax Return for Automobiles and Non-Essential Goods</option>
                        <option value="2200M">BIR Form 2200M - Excise Tax Return for Mineral Products</option>
                        <option value="2200P">BIR Form 2200P - Excise Tax Return for Petroleum Products</option>
                        <option value="2200S">BIR Form 2200S - Excise Tax Return for Sweetened Beverages</option>
                        <option value="2200T">BIR Form 2200T - Excise Tax Return for Tobacco Products</option>
                        <option value="2550M">BIR Form 2550M - Monthly Value-Added Tax Declaration</option>
                        <option value="2550Q">BIR Form 2550Q - Quarterly Value-Added Tax Return</option>
                        <option value="2551">BIR Form 2551Q - Quarterly Percentage Tax Return</option>
                        <option value="2551Qv2018">BIR Form 2551Qv2018 - Quarterly Percentage Tax Return</option>
                        <option value="2551M">BIR Form 2551M - Monthly Percentage Tax Return</option>
                        <option value="2552">BIR Form 2552 - Percentage Tax Return on Stocks</option>
                        <option value="2553">BIR Form 2553 - Percentage Tax Payable Under Special Laws</option>
                    </select>
                     <input type="button" value="Fill-up" name="btnFillup" id="btnFillup" onclick="newForm();" style="display:inline; margin-top:1px;" />
                 </div>
            <!--<input type="button" value="Inquire" name="btnInquire" id="btnInquire" onclick="window.location='BIRSearch.hta';" style="display:inline; margin-top:1px;"/>-->
            <div id="msg" style="display:none;"></div>
        </div>

            <div id="content" class="break">
                <!--output table-->
                <table class="table_head" cellspacing="0" cellpadding="0" border="0" width="100%" background="none">
                    <tr>
                        <th width='20'><span class="mainLabel">&nbsp;</span></th>
                        <th width='250'><span class="mainLabel">File Name</span></th>
                        <th width='125'><span class="mainLabel">Return Period</span></th>
                        <th width='125'><span class="mainLabel">Date Created</span></th>
                    </tr>
                </table>
                <div id="content2">
                    <table id="outPut" width="100%" cellspacing='0' cellpadding="0" border="0" background="none">
                        <!--<tr>
                        <td width='20' class='mainContent'>
                        <input id='"+FSo.item()+"' name='"+FSo.item()+"' type='radio' value="+FSo.item().name.replace(/ /g, '')+ "/>
                        </td>
                        <td class='mainContent' width='220'>&nbsp;</td>
                        <td width='110' class='mainContent'>&nbsp;</td>
                        <td width='110' class='mainContent'>&nbsp;</td>
                    </tr>-->
                    </table>
                </div>
                <br/>
                <br/>
                <div align="right" id="listButtonsDiv" style="display:none;">
                    <input type="button" id="btnListViewRecord" name="btnListViewRecord" class="mainContent" value="View" onclick="viewRecord()" />
                    <input type="button" id="btnListDelete" name="btnListDelete" class="mainContent" value="Delete" onclick="deleteRecord()" />
                    <!--<input type="button" id="btnListCancel" name="btnListCancel" class="mainContent" value="Cancel" onclick="window.location='BIRForms.hta';"/>-->
                </div>
            </div>
            <br/>
            <div align="center" class="mainLabel">Bureau of Internal Revenue
                <br/>Copyright 2014</div>
        </div>
    </div>
    <!-- all content-->

    <div style="height:1px; clear:both; width:100%;"></div>

    <div id="modalHaveDisk" style="width:50%; display:none; height:43%; position:fixed; top:3%; left:25%; right:auto; overflow-y:auto; overflow-x:hidden; background:#e2e2e2; z-index:100;" align="center">
        <br/>
        <br/>
        <table border="0" width="60%" align="right">
            <tr class="modalHeader">
                <td>Have Disk</td>
            </tr>
        </table>
        <table border="0" cellspacing="3" cellpadding="3" width="60%">
            <tr>
                <td>&nbsp;</td>
            </tr>
            <tr>
                <td>&nbsp;</td>
            </tr>
            <tr>
                <td class="modalColumnHeader">Make sure that a CD-RW or USB flash drive is already inserted.
                    <br/>Then choose its designated drive name.</td>
            </tr>
            <tr>
                <td>&nbsp;</td>
            </tr>
            <tr>
                <td>&nbsp;</td>
            </tr>
            <tr>
                <td class="modalColumnHeader">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Drive:
                    <select class="driveSelect" id="driveSelect" name="driveSelect" size="1" class="modalContent">

                    </select>
                </td>
            </tr>
        </table>
        <div align="center">
            <br />
            <br />
            <input type="button" class="printButtonClass" name="btnOkHaveDisk" id="btnOkHaveDisk" style="width:120px; height:30px;" value="OK" onclick="fileTransfer('I')" />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            <input type="button" class="printButtonClass" name="btnCancelHaveDisk" id="btnCancelHaveDisk" style="width:120px; height:30px;" value="CANCEL" onclick="cancelHaveDiskModal()" />
        </div>
        <br />
        <br />
    </div>
    <div id="modalHaveDiskX" style="width:50%; display:none; height:43%; position:fixed; top:3%; left:25%; right:auto; overflow-y:auto; overflow-x:hidden; background:#e2e2e2; z-index:3000;" align="center">
        <br/>
        <br/>
        <table border="0" width="60%" align="right">
            <tr class="modalHeader">
                <td>Have Disk</td>
            </tr>
        </table>
        <table border="0" cellspacing="3" cellpadding="3" width="60%">
            <tr>
                <td>&nbsp;</td>
            </tr>
            <tr>
                <td>&nbsp;</td>
            </tr>
            <tr>
                <td class="modalColumnHeader">Make sure that a CD-RW or USB flash drive is already inserted.
                    <br/>Then choose its designated drive name.</td>
            </tr>
            <tr>
                <td>&nbsp;</td>
            </tr>
            <tr>
                <td>&nbsp;</td>
            </tr>
            <tr>
                <td class="modalColumnHeader">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Drive:
                    <select class="driveSelectX" id="driveSelectX" name="driveSelectX" size="1" class="modalContent">

                    </select>
                </td>
            </tr>
        </table>
        <div align="center">
            <br />
            <br />
            <input type="button" class="printButtonClass" name="btnOkHaveDiskX" id="btnOkHaveDiskX" style="width:120px; height:30px;" value="OK" onclick="processExport()" />&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            <input type="button" class="printButtonClass" name="btnCancelHaveDiskX" id="btnCancelHaveDiskX" style="width:120px; height:30px;" value="CANCEL" onclick="cancelHaveDiskXModal()" />
        </div>
        <br />
        <br />
    </div>
    <!-- XML retrieval -->
    <div style="display:none;">
        <xmp id='xmlFormat'>
        </xmp>
        <!--format the doc -->
        <span id='xmlClose'>All Rights Reserved BIR 2014.</span>
    </div>
    <div id="responseBG" style="display:none;">
        <!--loaded files render here-->
    </div>
    <div id="responseProf" style="display:none;">
        <!--loaded files render here-->
    </div>
    <div id="responseRdo" style="display:none;">
        <!--loaded files render here-->
    </div>
    
    <div id="versionCheck" style="display:none; width:50%; position: relative; top:25%; left:25%; right:auto; overflow-y:auto; overflow-x:hidden; background:#e2e2e2; z-index:100;">
      <div id="versionCheckContent" style="margin-top:20px;padding-top:20px;text-align: center;overflow-y:auto; overflow-x:hidden;"></div>
      <div id="versionCheckFooter" style="padding:10px;position:relative;text-align:right;">
          <input id="versionChkCloseBtn" type="button" style="width:120px; height:30px;" value="Close"/>
      </div>
    </div>
    
    <div id="broadcastMessage" style="display:none; width:50%; position: relative; top:25%; left:25%; right:auto; overflow-y:auto; overflow-x:hidden; background:#e2e2e2; z-index:100;">
      <div id="broadcastMessageContent" style="margin-top:20px;padding-top:20px;text-align: center;overflow-y:auto; overflow-x:hidden;"></div>
      <div id="broadcastMessageFooter" style="padding:10px;position:relative;text-align:right;">
          <input id="broadcastMsgCloseBtn" type="button" style="width:120px; height:30px;" value="Close"/>
      </div>
    </div>
</BODY>

</html>